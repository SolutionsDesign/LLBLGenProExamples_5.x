//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:15:36
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.Authorization.HelperClasses;
using SD.LLBLGen.Pro.Examples.Authorization.FactoryClasses;
using SD.LLBLGen.Pro.Examples.Authorization.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.Authorization.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Orders'.<br/><br/></summary>
	[Serializable]
	public partial class OrdersEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<OrderDetailsEntity> _orderDetails;
		private CustomersEntity _customers;
		private EmployeesEntity _employees;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static OrdersEntityStaticMetaData _staticMetaData = new OrdersEntityStaticMetaData();
		private static OrdersRelations _relationsFactory = new OrdersRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Customers</summary>
			public static readonly string Customers = "Customers";
			/// <summary>Member name Employees</summary>
			public static readonly string Employees = "Employees";
			/// <summary>Member name OrderDetails</summary>
			public static readonly string OrderDetails = "OrderDetails";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class OrdersEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public OrdersEntityStaticMetaData()
			{
				SetEntityCoreInfo("OrdersEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.OrdersEntity, typeof(OrdersEntity), typeof(OrdersEntityFactory), false);
				AddNavigatorMetaData<OrdersEntity, EntityCollection<OrderDetailsEntity>>("OrderDetails", a => a._orderDetails, (a, b) => a._orderDetails = b, a => a.OrderDetails, () => new OrdersRelations().OrderDetailsEntityUsingOrderId, typeof(OrderDetailsEntity), (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.OrderDetailsEntity);
				AddNavigatorMetaData<OrdersEntity, CustomersEntity>("Customers", "Orders", (a, b) => a._customers = b, a => a._customers, (a, b) => a.Customers = b, SD.LLBLGen.Pro.Examples.Authorization.RelationClasses.StaticOrdersRelations.CustomersEntityUsingCustomerIdStatic, ()=>new OrdersRelations().CustomersEntityUsingCustomerId, null, new int[] { (int)OrdersFieldIndex.CustomerId }, null, true, (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.CustomersEntity);
				AddNavigatorMetaData<OrdersEntity, EmployeesEntity>("Employees", "Orders", (a, b) => a._employees = b, a => a._employees, (a, b) => a.Employees = b, SD.LLBLGen.Pro.Examples.Authorization.RelationClasses.StaticOrdersRelations.EmployeesEntityUsingEmployeeIdStatic, ()=>new OrdersRelations().EmployeesEntityUsingEmployeeId, null, new int[] { (int)OrdersFieldIndex.EmployeeId }, null, true, (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.EmployeesEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static OrdersEntity()
		{
		}

		/// <summary> CTor</summary>
		public OrdersEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public OrdersEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this OrdersEntity</param>
		public OrdersEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="orderId">PK value for Orders which data should be fetched into this Orders object</param>
		public OrdersEntity(System.Int32 orderId) : this(orderId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="orderId">PK value for Orders which data should be fetched into this Orders object</param>
		/// <param name="validator">The custom validator object for this OrdersEntity</param>
		public OrdersEntity(System.Int32 orderId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.OrderId = orderId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected OrdersEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'OrderDetails' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrderDetails() { return CreateRelationInfoForNavigator("OrderDetails"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Customers' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomers() { return CreateRelationInfoForNavigator("Customers"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Employees' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployees() { return CreateRelationInfoForNavigator("Employees"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this OrdersEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static OrdersRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'OrderDetails' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrderDetails { get { return _staticMetaData.GetPrefetchPathElement("OrderDetails", CommonEntityBase.CreateEntityCollection<OrderDetailsEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Customers' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomers { get { return _staticMetaData.GetPrefetchPathElement("Customers", CommonEntityBase.CreateEntityCollection<CustomersEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employees' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployees { get { return _staticMetaData.GetPrefetchPathElement("Employees", CommonEntityBase.CreateEntityCollection<EmployeesEntity>()); } }

		/// <summary>The CustomerId property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."CustomerID".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 5.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CustomerId
		{
			get { return (System.String)GetValue((int)OrdersFieldIndex.CustomerId, true); }
			set	{ SetValue((int)OrdersFieldIndex.CustomerId, value); }
		}

		/// <summary>The EmployeeId property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."EmployeeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> EmployeeId
		{
			get { return (Nullable<System.Int32>)GetValue((int)OrdersFieldIndex.EmployeeId, false); }
			set	{ SetValue((int)OrdersFieldIndex.EmployeeId, value); }
		}

		/// <summary>The Freight property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."Freight".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> Freight
		{
			get { return (Nullable<System.Decimal>)GetValue((int)OrdersFieldIndex.Freight, false); }
			set	{ SetValue((int)OrdersFieldIndex.Freight, value); }
		}

		/// <summary>The OrderDate property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."OrderDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> OrderDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)OrdersFieldIndex.OrderDate, false); }
			set	{ SetValue((int)OrdersFieldIndex.OrderDate, value); }
		}

		/// <summary>The OrderId property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."OrderID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 OrderId
		{
			get { return (System.Int32)GetValue((int)OrdersFieldIndex.OrderId, true); }
			set { SetValue((int)OrdersFieldIndex.OrderId, value); }		}

		/// <summary>The RequiredDate property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."RequiredDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> RequiredDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)OrdersFieldIndex.RequiredDate, false); }
			set	{ SetValue((int)OrdersFieldIndex.RequiredDate, value); }
		}

		/// <summary>The ShipAddress property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipAddress".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipAddress
		{
			get { return (System.String)GetValue((int)OrdersFieldIndex.ShipAddress, true); }
			set	{ SetValue((int)OrdersFieldIndex.ShipAddress, value); }
		}

		/// <summary>The ShipCity property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipCity".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipCity
		{
			get { return (System.String)GetValue((int)OrdersFieldIndex.ShipCity, true); }
			set	{ SetValue((int)OrdersFieldIndex.ShipCity, value); }
		}

		/// <summary>The ShipCountry property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipCountry".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipCountry
		{
			get { return (System.String)GetValue((int)OrdersFieldIndex.ShipCountry, true); }
			set	{ SetValue((int)OrdersFieldIndex.ShipCountry, value); }
		}

		/// <summary>The ShipName property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipName
		{
			get { return (System.String)GetValue((int)OrdersFieldIndex.ShipName, true); }
			set	{ SetValue((int)OrdersFieldIndex.ShipName, value); }
		}

		/// <summary>The ShippedDate property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShippedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> ShippedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)OrdersFieldIndex.ShippedDate, false); }
			set	{ SetValue((int)OrdersFieldIndex.ShippedDate, value); }
		}

		/// <summary>The ShipPostalCode property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipPostalCode".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipPostalCode
		{
			get { return (System.String)GetValue((int)OrdersFieldIndex.ShipPostalCode, true); }
			set	{ SetValue((int)OrdersFieldIndex.ShipPostalCode, value); }
		}

		/// <summary>The ShipRegion property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipRegion".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipRegion
		{
			get { return (System.String)GetValue((int)OrdersFieldIndex.ShipRegion, true); }
			set	{ SetValue((int)OrdersFieldIndex.ShipRegion, value); }
		}

		/// <summary>The ShipVia property of the Entity Orders<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipVia".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ShipVia
		{
			get { return (Nullable<System.Int32>)GetValue((int)OrdersFieldIndex.ShipVia, false); }
			set	{ SetValue((int)OrdersFieldIndex.ShipVia, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'OrderDetailsEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(OrderDetailsEntity))]
		public virtual EntityCollection<OrderDetailsEntity> OrderDetails { get { return GetOrCreateEntityCollection<OrderDetailsEntity, OrderDetailsEntityFactory>("Orders", true, false, ref _orderDetails); } }

		/// <summary>Gets / sets related entity of type 'CustomersEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual CustomersEntity Customers
		{
			get { return _customers; }
			set { SetSingleRelatedEntityNavigator(value, "Customers"); }
		}

		/// <summary>Gets / sets related entity of type 'EmployeesEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual EmployeesEntity Employees
		{
			get { return _employees; }
			set { SetSingleRelatedEntityNavigator(value, "Employees"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples.Authorization
{
	public enum OrdersFieldIndex
	{
		///<summary>CustomerId. </summary>
		CustomerId,
		///<summary>EmployeeId. </summary>
		EmployeeId,
		///<summary>Freight. </summary>
		Freight,
		///<summary>OrderDate. </summary>
		OrderDate,
		///<summary>OrderId. </summary>
		OrderId,
		///<summary>RequiredDate. </summary>
		RequiredDate,
		///<summary>ShipAddress. </summary>
		ShipAddress,
		///<summary>ShipCity. </summary>
		ShipCity,
		///<summary>ShipCountry. </summary>
		ShipCountry,
		///<summary>ShipName. </summary>
		ShipName,
		///<summary>ShippedDate. </summary>
		ShippedDate,
		///<summary>ShipPostalCode. </summary>
		ShipPostalCode,
		///<summary>ShipRegion. </summary>
		ShipRegion,
		///<summary>ShipVia. </summary>
		ShipVia,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.Authorization.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Orders. </summary>
	public partial class OrdersRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between OrdersEntity and OrderDetailsEntity over the 1:n relation they have, using the relation between the fields: Orders.OrderId - OrderDetails.OrderId</summary>
		public virtual IEntityRelation OrderDetailsEntityUsingOrderId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "OrderDetails", true, new[] { OrdersFields.OrderId, OrderDetailsFields.OrderId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrdersEntity and CustomersEntity over the m:1 relation they have, using the relation between the fields: Orders.CustomerId - Customers.CustomerId</summary>
		public virtual IEntityRelation CustomersEntityUsingCustomerId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Customers", false, new[] { CustomersFields.CustomerId, OrdersFields.CustomerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrdersEntity and EmployeesEntity over the m:1 relation they have, using the relation between the fields: Orders.EmployeeId - Employees.EmployeeId</summary>
		public virtual IEntityRelation EmployeesEntityUsingEmployeeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Employees", false, new[] { EmployeesFields.EmployeeId, OrdersFields.EmployeeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticOrdersRelations
	{
		internal static readonly IEntityRelation OrderDetailsEntityUsingOrderIdStatic = new OrdersRelations().OrderDetailsEntityUsingOrderId;
		internal static readonly IEntityRelation CustomersEntityUsingCustomerIdStatic = new OrdersRelations().CustomersEntityUsingCustomerId;
		internal static readonly IEntityRelation EmployeesEntityUsingEmployeeIdStatic = new OrdersRelations().EmployeesEntityUsingEmployeeId;

		/// <summary>CTor</summary>
		static StaticOrdersRelations() { }
	}
}
