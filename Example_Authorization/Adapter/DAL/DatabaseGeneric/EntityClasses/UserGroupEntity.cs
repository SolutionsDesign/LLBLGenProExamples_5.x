//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:15:36
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.Authorization.HelperClasses;
using SD.LLBLGen.Pro.Examples.Authorization.FactoryClasses;
using SD.LLBLGen.Pro.Examples.Authorization.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.Authorization.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'UserGroup'.<br/><br/></summary>
	[Serializable]
	public partial class UserGroupEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private GroupEntity _group;
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static UserGroupEntityStaticMetaData _staticMetaData = new UserGroupEntityStaticMetaData();
		private static UserGroupRelations _relationsFactory = new UserGroupRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Group</summary>
			public static readonly string Group = "Group";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserGroupEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserGroupEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserGroupEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.UserGroupEntity, typeof(UserGroupEntity), typeof(UserGroupEntityFactory), false);
				AddNavigatorMetaData<UserGroupEntity, GroupEntity>("Group", "UserGroup", (a, b) => a._group = b, a => a._group, (a, b) => a.Group = b, SD.LLBLGen.Pro.Examples.Authorization.RelationClasses.StaticUserGroupRelations.GroupEntityUsingGroupIdStatic, ()=>new UserGroupRelations().GroupEntityUsingGroupId, null, new int[] { (int)UserGroupFieldIndex.GroupId }, null, true, (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.GroupEntity);
				AddNavigatorMetaData<UserGroupEntity, UserEntity>("User", "UserGroup", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, SD.LLBLGen.Pro.Examples.Authorization.RelationClasses.StaticUserGroupRelations.UserEntityUsingUserIdStatic, ()=>new UserGroupRelations().UserEntityUsingUserId, null, new int[] { (int)UserGroupFieldIndex.UserId }, null, true, (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserGroupEntity()
		{
		}

		/// <summary> CTor</summary>
		public UserGroupEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserGroupEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserGroupEntity</param>
		public UserGroupEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		public UserGroupEntity(System.Int32 groupId, System.String userId) : this(groupId, userId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="validator">The custom validator object for this UserGroupEntity</param>
		public UserGroupEntity(System.Int32 groupId, System.String userId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.GroupId = groupId;
			this.UserId = userId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserGroupEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Group' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoGroup() { return CreateRelationInfoForNavigator("Group"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserGroupEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserGroupRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Group' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathGroup { get { return _staticMetaData.GetPrefetchPathElement("Group", CommonEntityBase.CreateEntityCollection<GroupEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The GroupId property of the Entity UserGroup<br/><br/></summary>
		/// <remarks>Mapped on  table field: "UserGroup"."GroupId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 GroupId
		{
			get { return (System.Int32)GetValue((int)UserGroupFieldIndex.GroupId, true); }
			set	{ SetValue((int)UserGroupFieldIndex.GroupId, value); }
		}

		/// <summary>The UserId property of the Entity UserGroup<br/><br/></summary>
		/// <remarks>Mapped on  table field: "UserGroup"."UserId".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String UserId
		{
			get { return (System.String)GetValue((int)UserGroupFieldIndex.UserId, true); }
			set	{ SetValue((int)UserGroupFieldIndex.UserId, value); }
		}

		/// <summary>Gets / sets related entity of type 'GroupEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual GroupEntity Group
		{
			get { return _group; }
			set { SetSingleRelatedEntityNavigator(value, "Group"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples.Authorization
{
	public enum UserGroupFieldIndex
	{
		///<summary>GroupId. </summary>
		GroupId,
		///<summary>UserId. </summary>
		UserId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.Authorization.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: UserGroup. </summary>
	public partial class UserGroupRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between UserGroupEntity and GroupEntity over the m:1 relation they have, using the relation between the fields: UserGroup.GroupId - Group.Id</summary>
		public virtual IEntityRelation GroupEntityUsingGroupId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Group", false, new[] { GroupFields.Id, UserGroupFields.GroupId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserGroupEntity and UserEntity over the m:1 relation they have, using the relation between the fields: UserGroup.UserId - User.UserId</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserId, UserGroupFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserGroupRelations
	{
		internal static readonly IEntityRelation GroupEntityUsingGroupIdStatic = new UserGroupRelations().GroupEntityUsingGroupId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new UserGroupRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticUserGroupRelations() { }
	}
}
