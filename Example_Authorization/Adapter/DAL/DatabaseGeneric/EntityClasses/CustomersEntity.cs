//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:15:36
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.Authorization.HelperClasses;
using SD.LLBLGen.Pro.Examples.Authorization.FactoryClasses;
using SD.LLBLGen.Pro.Examples.Authorization.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.Authorization.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Customers'.<br/><br/></summary>
	[Serializable]
	public partial class CustomersEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<OrdersEntity> _orders;
		private EntityCollection<EmployeesEntity> _employeesCollectionViaOrders;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CustomersEntityStaticMetaData _staticMetaData = new CustomersEntityStaticMetaData();
		private static CustomersRelations _relationsFactory = new CustomersRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Orders</summary>
			public static readonly string Orders = "Orders";
			/// <summary>Member name EmployeesCollectionViaOrders</summary>
			public static readonly string EmployeesCollectionViaOrders = "EmployeesCollectionViaOrders";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomersEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomersEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomersEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.CustomersEntity, typeof(CustomersEntity), typeof(CustomersEntityFactory), false);
				AddNavigatorMetaData<CustomersEntity, EntityCollection<OrdersEntity>>("Orders", a => a._orders, (a, b) => a._orders = b, a => a.Orders, () => new CustomersRelations().OrdersEntityUsingCustomerId, typeof(OrdersEntity), (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.OrdersEntity);
				AddNavigatorMetaData<CustomersEntity, EntityCollection<EmployeesEntity>>("EmployeesCollectionViaOrders", a => a._employeesCollectionViaOrders, (a, b) => a._employeesCollectionViaOrders = b, a => a.EmployeesCollectionViaOrders, () => new CustomersRelations().OrdersEntityUsingCustomerId, () => new OrdersRelations().EmployeesEntityUsingEmployeeId, "CustomersEntity__", "Orders_", typeof(EmployeesEntity), (int)SD.LLBLGen.Pro.Examples.Authorization.EntityType.EmployeesEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CustomersEntity()
		{
		}

		/// <summary> CTor</summary>
		public CustomersEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CustomersEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CustomersEntity</param>
		public CustomersEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="customerId">PK value for Customers which data should be fetched into this Customers object</param>
		public CustomersEntity(System.String customerId) : this(customerId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="customerId">PK value for Customers which data should be fetched into this Customers object</param>
		/// <param name="validator">The custom validator object for this CustomersEntity</param>
		public CustomersEntity(System.String customerId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.CustomerId = customerId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomersEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Orders' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrders() { return CreateRelationInfoForNavigator("Orders"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Employees' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployeesCollectionViaOrders() { return CreateRelationInfoForNavigator("EmployeesCollectionViaOrders"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CustomersEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomersRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Orders' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrders { get { return _staticMetaData.GetPrefetchPathElement("Orders", CommonEntityBase.CreateEntityCollection<OrdersEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employees' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployeesCollectionViaOrders { get { return _staticMetaData.GetPrefetchPathElement("EmployeesCollectionViaOrders", CommonEntityBase.CreateEntityCollection<EmployeesEntity>()); } }

		/// <summary>The Address property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Address".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Address
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.Address, true); }
			set	{ SetValue((int)CustomersFieldIndex.Address, value); }
		}

		/// <summary>The City property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."City".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String City
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.City, true); }
			set	{ SetValue((int)CustomersFieldIndex.City, value); }
		}

		/// <summary>The CompanyName property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."CompanyName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CompanyName
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.CompanyName, true); }
			set	{ SetValue((int)CustomersFieldIndex.CompanyName, value); }
		}

		/// <summary>The ContactName property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."ContactName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactName
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.ContactName, true); }
			set	{ SetValue((int)CustomersFieldIndex.ContactName, value); }
		}

		/// <summary>The ContactTitle property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."ContactTitle".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactTitle
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.ContactTitle, true); }
			set	{ SetValue((int)CustomersFieldIndex.ContactTitle, value); }
		}

		/// <summary>The Country property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Country".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Country
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.Country, true); }
			set	{ SetValue((int)CustomersFieldIndex.Country, value); }
		}

		/// <summary>The CustomerId property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."CustomerID".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 5.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerId
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.CustomerId, true); }
			set	{ SetValue((int)CustomersFieldIndex.CustomerId, value); }
		}

		/// <summary>The Fax property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Fax".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Fax
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.Fax, true); }
			set	{ SetValue((int)CustomersFieldIndex.Fax, value); }
		}

		/// <summary>The Phone property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Phone".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Phone
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.Phone, true); }
			set	{ SetValue((int)CustomersFieldIndex.Phone, value); }
		}

		/// <summary>The PostalCode property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."PostalCode".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostalCode
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.PostalCode, true); }
			set	{ SetValue((int)CustomersFieldIndex.PostalCode, value); }
		}

		/// <summary>The Region property of the Entity Customers<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Region".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Region
		{
			get { return (System.String)GetValue((int)CustomersFieldIndex.Region, true); }
			set	{ SetValue((int)CustomersFieldIndex.Region, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'OrdersEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(OrdersEntity))]
		public virtual EntityCollection<OrdersEntity> Orders { get { return GetOrCreateEntityCollection<OrdersEntity, OrdersEntityFactory>("Customers", true, false, ref _orders); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeesEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeesEntity))]
		public virtual EntityCollection<EmployeesEntity> EmployeesCollectionViaOrders { get { return GetOrCreateEntityCollection<EmployeesEntity, EmployeesEntityFactory>("CustomersCollectionViaOrders", false, true, ref _employeesCollectionViaOrders); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples.Authorization
{
	public enum CustomersFieldIndex
	{
		///<summary>Address. </summary>
		Address,
		///<summary>City. </summary>
		City,
		///<summary>CompanyName. </summary>
		CompanyName,
		///<summary>ContactName. </summary>
		ContactName,
		///<summary>ContactTitle. </summary>
		ContactTitle,
		///<summary>Country. </summary>
		Country,
		///<summary>CustomerId. </summary>
		CustomerId,
		///<summary>Fax. </summary>
		Fax,
		///<summary>Phone. </summary>
		Phone,
		///<summary>PostalCode. </summary>
		PostalCode,
		///<summary>Region. </summary>
		Region,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.Authorization.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Customers. </summary>
	public partial class CustomersRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CustomersEntity and OrdersEntity over the 1:n relation they have, using the relation between the fields: Customers.CustomerId - Orders.CustomerId</summary>
		public virtual IEntityRelation OrdersEntityUsingCustomerId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Orders", true, new[] { CustomersFields.CustomerId, OrdersFields.CustomerId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomersRelations
	{
		internal static readonly IEntityRelation OrdersEntityUsingCustomerIdStatic = new CustomersRelations().OrdersEntityUsingCustomerId;

		/// <summary>CTor</summary>
		static StaticCustomersRelations() { }
	}
}
