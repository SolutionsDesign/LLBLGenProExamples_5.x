//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:34:52
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.HelperClasses;
using SD.LLBLGen.Pro.Examples.FactoryClasses;
using SD.LLBLGen.Pro.Examples.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Category'.<br/><br/></summary>
	[Serializable]
	public partial class CategoryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<ProductEntity> _products;
		private EntityCollection<SupplierEntity> _supplierCollectionViaProduct;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CategoryEntityStaticMetaData _staticMetaData = new CategoryEntityStaticMetaData();
		private static CategoryRelations _relationsFactory = new CategoryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Products</summary>
			public static readonly string Products = "Products";
			/// <summary>Member name SupplierCollectionViaProduct</summary>
			public static readonly string SupplierCollectionViaProduct = "SupplierCollectionViaProduct";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CategoryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CategoryEntityStaticMetaData()
			{
				SetEntityCoreInfo("CategoryEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.EntityType.CategoryEntity, typeof(CategoryEntity), typeof(CategoryEntityFactory), false);
				AddNavigatorMetaData<CategoryEntity, EntityCollection<ProductEntity>>("Products", a => a._products, (a, b) => a._products = b, a => a.Products, () => new CategoryRelations().ProductEntityUsingCategoryId, typeof(ProductEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.ProductEntity);
				AddNavigatorMetaData<CategoryEntity, EntityCollection<SupplierEntity>>("SupplierCollectionViaProduct", a => a._supplierCollectionViaProduct, (a, b) => a._supplierCollectionViaProduct = b, a => a.SupplierCollectionViaProduct, () => new CategoryRelations().ProductEntityUsingCategoryId, () => new ProductRelations().SupplierEntityUsingSupplierId, "CategoryEntity__", "Product_", typeof(SupplierEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.SupplierEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CategoryEntity()
		{
		}

		/// <summary> CTor</summary>
		public CategoryEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CategoryEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CategoryEntity</param>
		public CategoryEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="categoryId">PK value for Category which data should be fetched into this Category object</param>
		public CategoryEntity(System.Int32 categoryId) : this(categoryId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="categoryId">PK value for Category which data should be fetched into this Category object</param>
		/// <param name="validator">The custom validator object for this CategoryEntity</param>
		public CategoryEntity(System.Int32 categoryId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.CategoryId = categoryId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CategoryEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProducts() { return CreateRelationInfoForNavigator("Products"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Supplier' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSupplierCollectionViaProduct() { return CreateRelationInfoForNavigator("SupplierCollectionViaProduct"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CategoryEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CategoryRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProducts { get { return _staticMetaData.GetPrefetchPathElement("Products", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Supplier' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSupplierCollectionViaProduct { get { return _staticMetaData.GetPrefetchPathElement("SupplierCollectionViaProduct", CommonEntityBase.CreateEntityCollection<SupplierEntity>()); } }

		/// <summary>The CategoryId property of the Entity Category<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Categories"."CategoryID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 CategoryId
		{
			get { return (System.Int32)GetValue((int)CategoryFieldIndex.CategoryId, true); }
			set { SetValue((int)CategoryFieldIndex.CategoryId, value); }		}

		/// <summary>The CategoryName property of the Entity Category<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Categories"."CategoryName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CategoryName
		{
			get { return (System.String)GetValue((int)CategoryFieldIndex.CategoryName, true); }
			set	{ SetValue((int)CategoryFieldIndex.CategoryName, value); }
		}

		/// <summary>The Description property of the Entity Category<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Categories"."Description".<br/>Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Description
		{
			get { return (System.String)GetValue((int)CategoryFieldIndex.Description, true); }
			set	{ SetValue((int)CategoryFieldIndex.Description, value); }
		}

		/// <summary>The Picture property of the Entity Category<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Categories"."Picture".<br/>Table field type characteristics (type, precision, scale, length): Image, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.Byte[] Picture
		{
			get { return (System.Byte[])GetValue((int)CategoryFieldIndex.Picture, true); }
			set	{ SetValue((int)CategoryFieldIndex.Picture, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductEntity))]
		public virtual EntityCollection<ProductEntity> Products { get { return GetOrCreateEntityCollection<ProductEntity, ProductEntityFactory>("Category", true, false, ref _products); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SupplierEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SupplierEntity))]
		public virtual EntityCollection<SupplierEntity> SupplierCollectionViaProduct { get { return GetOrCreateEntityCollection<SupplierEntity, SupplierEntityFactory>("CategoriesCollectionViaProducts", false, true, ref _supplierCollectionViaProduct); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace SD.LLBLGen.Pro.Examples
{
	public enum CategoryFieldIndex
	{
		///<summary>CategoryId. </summary>
		CategoryId,
		///<summary>CategoryName. </summary>
		CategoryName,
		///<summary>Description. </summary>
		Description,
		///<summary>Picture. </summary>
		Picture,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Category. </summary>
	public partial class CategoryRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CategoryEntity and ProductEntity over the 1:n relation they have, using the relation between the fields: Category.CategoryId - Product.CategoryId</summary>
		public virtual IEntityRelation ProductEntityUsingCategoryId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Products", true, new[] { CategoryFields.CategoryId, ProductFields.CategoryId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCategoryRelations
	{
		internal static readonly IEntityRelation ProductEntityUsingCategoryIdStatic = new CategoryRelations().ProductEntityUsingCategoryId;

		/// <summary>CTor</summary>
		static StaticCategoryRelations() { }
	}
}
