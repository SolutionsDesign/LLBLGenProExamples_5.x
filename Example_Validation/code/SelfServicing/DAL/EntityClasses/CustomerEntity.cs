//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:31:17
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.FactoryClasses;
using SD.LLBLGen.Pro.Examples.DaoClasses;
using SD.LLBLGen.Pro.Examples.RelationClasses;
using SD.LLBLGen.Pro.Examples.HelperClasses;
using SD.LLBLGen.Pro.Examples.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Customer'. <br/><br/></summary>
	[Serializable]
	public partial class CustomerEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection	_customerCustomerDemo;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection	_orders;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection _customerDemographicsCollectionViaCustomerCustomerDemo;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection _employeeCollectionViaOrder;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection _shipperCollectionViaOrder;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CustomerEntityStaticMetaData _staticMetaData = new CustomerEntityStaticMetaData();
		private static CustomerRelations _relationsFactory = new CustomerRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CustomerCustomerDemo</summary>
			public static readonly string CustomerCustomerDemo = "CustomerCustomerDemo";
			/// <summary>Member name Orders</summary>
			public static readonly string Orders = "Orders";
			/// <summary>Member name CustomerDemographicsCollectionViaCustomerCustomerDemo</summary>
			public static readonly string CustomerDemographicsCollectionViaCustomerCustomerDemo = "CustomerDemographicsCollectionViaCustomerCustomerDemo";
			/// <summary>Member name EmployeeCollectionViaOrder</summary>
			public static readonly string EmployeeCollectionViaOrder = "EmployeeCollectionViaOrder";
			/// <summary>Member name ShipperCollectionViaOrder</summary>
			public static readonly string ShipperCollectionViaOrder = "ShipperCollectionViaOrder";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomerEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomerEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomerEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerEntity, typeof(CustomerEntity), typeof(CustomerEntityFactory), false);
				AddNavigatorMetaData<CustomerEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection>("CustomerCustomerDemo", a => a._customerCustomerDemo, (a, b) => a._customerCustomerDemo = b, a => a.CustomerCustomerDemo, () => new CustomerRelations().CustomerCustomerDemoEntityUsingCustomerId, typeof(CustomerCustomerDemoEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerCustomerDemoEntity);
				AddNavigatorMetaData<CustomerEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection>("Orders", a => a._orders, (a, b) => a._orders = b, a => a.Orders, () => new CustomerRelations().OrderEntityUsingCustomerId, typeof(OrderEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.OrderEntity);
				AddNavigatorMetaData<CustomerEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection>("CustomerDemographicsCollectionViaCustomerCustomerDemo", a => a._customerDemographicsCollectionViaCustomerCustomerDemo, (a, b) => a._customerDemographicsCollectionViaCustomerCustomerDemo = b, a => a.CustomerDemographicsCollectionViaCustomerCustomerDemo, () => new CustomerRelations().CustomerCustomerDemoEntityUsingCustomerId, () => new CustomerCustomerDemoRelations().CustomerDemographyEntityUsingCustomerTypeId, "CustomerEntity__", "CustomerCustomerDemo_", typeof(CustomerDemographyEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerDemographyEntity);
				AddNavigatorMetaData<CustomerEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection>("EmployeeCollectionViaOrder", a => a._employeeCollectionViaOrder, (a, b) => a._employeeCollectionViaOrder = b, a => a.EmployeeCollectionViaOrder, () => new CustomerRelations().OrderEntityUsingCustomerId, () => new OrderRelations().EmployeeEntityUsingEmployeeId, "CustomerEntity__", "Order_", typeof(EmployeeEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeEntity);
				AddNavigatorMetaData<CustomerEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection>("ShipperCollectionViaOrder", a => a._shipperCollectionViaOrder, (a, b) => a._shipperCollectionViaOrder = b, a => a.ShipperCollectionViaOrder, () => new CustomerRelations().OrderEntityUsingCustomerId, () => new OrderRelations().ShipperEntityUsingShipVia, "CustomerEntity__", "Order_", typeof(ShipperEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.ShipperEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static CustomerEntity()
		{
		}

		/// <summary>CTor</summary>
		public CustomerEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		public CustomerEntity(System.String customerId)
		{
			InitClassFetch(customerId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public CustomerEntity(System.String customerId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(customerId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <param name="validator">The custom validator object for this CustomerEntity</param>
		public CustomerEntity(System.String customerId, IValidator validator)
		{
			InitClassFetch(customerId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomerEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId)
		{
			return FetchUsingPK(customerId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(customerId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(customerId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(customerId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.CustomerId, null, null, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'CustomerCustomerDemoEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch)
		{
			return GetMultiCustomerCustomerDemo(forceFetch, _customerCustomerDemo.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'CustomerCustomerDemoEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiCustomerCustomerDemo(forceFetch, _customerCustomerDemo.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiCustomerCustomerDemo(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection>("CustomerCustomerDemo", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(this, null, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'CustomerCustomerDemo'. These settings will be taken into account
		/// when the property CustomerCustomerDemo is requested or GetMultiCustomerCustomerDemo is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersCustomerCustomerDemo(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_customerCustomerDemo.SortClauses=sortClauses;
			_customerCustomerDemo.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'OrderEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch)
		{
			return GetMultiOrders(forceFetch, _orders.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'OrderEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiOrders(forceFetch, _orders.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiOrders(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection>("Orders", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(this, null, null, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'Orders'. These settings will be taken into account
		/// when the property Orders is requested or GetMultiOrders is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersOrders(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_orders.SortClauses=sortClauses;
			_orders.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'CustomerDemographyEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'CustomerDemographyEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection GetMultiCustomerDemographicsCollectionViaCustomerCustomerDemo(bool forceFetch)
		{
			return GetMultiCustomerDemographicsCollectionViaCustomerCustomerDemo(forceFetch, _customerDemographicsCollectionViaCustomerCustomerDemo.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'CustomerDemographyEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection GetMultiCustomerDemographicsCollectionViaCustomerCustomerDemo(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(CustomerFields.CustomerId, ComparisonOperator.Equal, this.CustomerId, "CustomerEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection>("CustomerDemographicsCollectionViaCustomerCustomerDemo", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'CustomerDemographicsCollectionViaCustomerCustomerDemo'. These settings will be taken into account
		/// when the property CustomerDemographicsCollectionViaCustomerCustomerDemo is requested or GetMultiCustomerDemographicsCollectionViaCustomerCustomerDemo is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersCustomerDemographicsCollectionViaCustomerCustomerDemo(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_customerDemographicsCollectionViaCustomerCustomerDemo.SortClauses=sortClauses;
			_customerDemographicsCollectionViaCustomerCustomerDemo.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'EmployeeEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployeeCollectionViaOrder(bool forceFetch)
		{
			return GetMultiEmployeeCollectionViaOrder(forceFetch, _employeeCollectionViaOrder.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployeeCollectionViaOrder(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(CustomerFields.CustomerId, ComparisonOperator.Equal, this.CustomerId, "CustomerEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection>("EmployeeCollectionViaOrder", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'EmployeeCollectionViaOrder'. These settings will be taken into account
		/// when the property EmployeeCollectionViaOrder is requested or GetMultiEmployeeCollectionViaOrder is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersEmployeeCollectionViaOrder(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_employeeCollectionViaOrder.SortClauses=sortClauses;
			_employeeCollectionViaOrder.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'ShipperEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'ShipperEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection GetMultiShipperCollectionViaOrder(bool forceFetch)
		{
			return GetMultiShipperCollectionViaOrder(forceFetch, _shipperCollectionViaOrder.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'ShipperEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection GetMultiShipperCollectionViaOrder(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(CustomerFields.CustomerId, ComparisonOperator.Equal, this.CustomerId, "CustomerEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection>("ShipperCollectionViaOrder", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'ShipperCollectionViaOrder'. These settings will be taken into account
		/// when the property ShipperCollectionViaOrder is requested or GetMultiShipperCollectionViaOrder is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersShipperCollectionViaOrder(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_shipperCollectionViaOrder.SortClauses=sortClauses;
			_shipperCollectionViaOrder.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <param name="validator">The validator object for this CustomerEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.String customerId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(customerId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			_customerCustomerDemo = new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection();
			_customerCustomerDemo.SetContainingEntityInfo(this, "Customer");

			_orders = new SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection();
			_orders.SetContainingEntityInfo(this, "Customer");
			_customerDemographicsCollectionViaCustomerCustomerDemo = new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection();
			_employeeCollectionViaOrder = new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection();
			_shipperCollectionViaOrder = new SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection();
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="customerId">PK value for Customer which data should be fetched into this Customer object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.String customerId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)CustomerFieldIndex.CustomerId].ForcedCurrentValueWrite(customerId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateCustomerDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomerRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'CustomerCustomerDemo' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerCustomerDemo { get { return _staticMetaData.GetPrefetchPathElement("CustomerCustomerDemo", new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Order' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathOrders { get { return _staticMetaData.GetPrefetchPathElement("Orders", new SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'CustomerDemography'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerDemographicsCollectionViaCustomerCustomerDemo { get { return _staticMetaData.GetPrefetchPathElement("CustomerDemographicsCollectionViaCustomerCustomerDemo", new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Employee'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathEmployeeCollectionViaOrder { get { return _staticMetaData.GetPrefetchPathElement("EmployeeCollectionViaOrder", new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Shipper'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathShipperCollectionViaOrder { get { return _staticMetaData.GetPrefetchPathElement("ShipperCollectionViaOrder", new SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection()); } }


		/// <summary>The Address property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Address"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Address
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.Address, true); }
			set	{ SetValue((int)CustomerFieldIndex.Address, value, true); }
		}

		/// <summary>The City property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."City"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String City
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.City, true); }
			set	{ SetValue((int)CustomerFieldIndex.City, value, true); }
		}

		/// <summary>The CompanyName property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."CompanyName"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CompanyName
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.CompanyName, true); }
			set	{ SetValue((int)CustomerFieldIndex.CompanyName, value, true); }
		}

		/// <summary>The ContactName property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."ContactName"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactName
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.ContactName, true); }
			set	{ SetValue((int)CustomerFieldIndex.ContactName, value, true); }
		}

		/// <summary>The ContactTitle property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."ContactTitle"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactTitle
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.ContactTitle, true); }
			set	{ SetValue((int)CustomerFieldIndex.ContactTitle, value, true); }
		}

		/// <summary>The Country property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Country"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Country
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.Country, true); }
			set	{ SetValue((int)CustomerFieldIndex.Country, value, true); }
		}

		/// <summary>The CustomerId property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."CustomerID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 5<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerId
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.CustomerId, true); }
			set	{ SetValue((int)CustomerFieldIndex.CustomerId, value, true); }
		}

		/// <summary>The Fax property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Fax"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Fax
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.Fax, true); }
			set	{ SetValue((int)CustomerFieldIndex.Fax, value, true); }
		}

		/// <summary>The Phone property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Phone"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Phone
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.Phone, true); }
			set	{ SetValue((int)CustomerFieldIndex.Phone, value, true); }
		}

		/// <summary>The PostalCode property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."PostalCode"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostalCode
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.PostalCode, true); }
			set	{ SetValue((int)CustomerFieldIndex.PostalCode, value, true); }
		}

		/// <summary>The Region property of the Entity Customer<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Customers"."Region"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Region
		{
			get { return (System.String)GetValue((int)CustomerFieldIndex.Region, true); }
			set	{ SetValue((int)CustomerFieldIndex.Region, value, true); }
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection CustomerCustomerDemo { get { return GetMultiCustomerCustomerDemo(false); } }

		/// <summary>Gets / sets the lazy loading flag for CustomerCustomerDemo. When set to true, CustomerCustomerDemo is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerCustomerDemo is accessed. You can always execute/ a forced fetch by calling GetMultiCustomerCustomerDemo(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerCustomerDemo
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerCustomerDemo"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerCustomerDemo", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerCustomerDemo already has been fetched. Setting this property to false when CustomerCustomerDemo has been fetched
		/// will clear the CustomerCustomerDemo collection well. Setting this property to true while CustomerCustomerDemo hasn't been fetched disables lazy loading for CustomerCustomerDemo</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerCustomerDemo
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerCustomerDemo");}
			set { SetAlreadyFetchedValueForNavigator("CustomerCustomerDemo", value, true);}
		}
		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection Orders { get { return GetMultiOrders(false); } }

		/// <summary>Gets / sets the lazy loading flag for Orders. When set to true, Orders is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Orders is accessed. You can always execute/ a forced fetch by calling GetMultiOrders(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchOrders
		{
			get	{ return GetAlwaysFetchValueForNavigator("Orders"); }
			set	{ SetAlwaysFetchValueForNavigator("Orders", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property Orders already has been fetched. Setting this property to false when Orders has been fetched
		/// will clear the Orders collection well. Setting this property to true while Orders hasn't been fetched disables lazy loading for Orders</summary>
		[Browsable(false)]
		public bool AlreadyFetchedOrders
		{
			get { return GetAlreadyFetchedValueForNavigator("Orders");}
			set { SetAlreadyFetchedValueForNavigator("Orders", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'CustomerDemographyEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerDemographyCollection CustomerDemographicsCollectionViaCustomerCustomerDemo { get { return GetMultiCustomerDemographicsCollectionViaCustomerCustomerDemo(false); } }

		/// <summary>Gets / sets the lazy loading flag for CustomerDemographicsCollectionViaCustomerCustomerDemo. When set to true, CustomerDemographicsCollectionViaCustomerCustomerDemo is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerDemographicsCollectionViaCustomerCustomerDemo is accessed. You can always execute a forced fetch by calling GetMultiCustomerDemographicsCollectionViaCustomerCustomerDemo(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerDemographicsCollectionViaCustomerCustomerDemo
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerDemographicsCollectionViaCustomerCustomerDemo"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerDemographicsCollectionViaCustomerCustomerDemo", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerDemographicsCollectionViaCustomerCustomerDemo already has been fetched. Setting this property to false when CustomerDemographicsCollectionViaCustomerCustomerDemo has been fetched
		/// will clear the CustomerDemographicsCollectionViaCustomerCustomerDemo collection well. Setting this property to true while CustomerDemographicsCollectionViaCustomerCustomerDemo hasn't been fetched disables lazy loading for CustomerDemographicsCollectionViaCustomerCustomerDemo</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerDemographicsCollectionViaCustomerCustomerDemo
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerDemographicsCollectionViaCustomerCustomerDemo");}
			set { SetAlreadyFetchedValueForNavigator("CustomerDemographicsCollectionViaCustomerCustomerDemo", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection EmployeeCollectionViaOrder { get { return GetMultiEmployeeCollectionViaOrder(false); } }

		/// <summary>Gets / sets the lazy loading flag for EmployeeCollectionViaOrder. When set to true, EmployeeCollectionViaOrder is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time EmployeeCollectionViaOrder is accessed. You can always execute a forced fetch by calling GetMultiEmployeeCollectionViaOrder(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchEmployeeCollectionViaOrder
		{
			get	{ return GetAlwaysFetchValueForNavigator("EmployeeCollectionViaOrder"); }
			set	{ SetAlwaysFetchValueForNavigator("EmployeeCollectionViaOrder", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property EmployeeCollectionViaOrder already has been fetched. Setting this property to false when EmployeeCollectionViaOrder has been fetched
		/// will clear the EmployeeCollectionViaOrder collection well. Setting this property to true while EmployeeCollectionViaOrder hasn't been fetched disables lazy loading for EmployeeCollectionViaOrder</summary>
		[Browsable(false)]
		public bool AlreadyFetchedEmployeeCollectionViaOrder
		{
			get { return GetAlreadyFetchedValueForNavigator("EmployeeCollectionViaOrder");}
			set { SetAlreadyFetchedValueForNavigator("EmployeeCollectionViaOrder", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'ShipperEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection ShipperCollectionViaOrder { get { return GetMultiShipperCollectionViaOrder(false); } }

		/// <summary>Gets / sets the lazy loading flag for ShipperCollectionViaOrder. When set to true, ShipperCollectionViaOrder is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time ShipperCollectionViaOrder is accessed. You can always execute a forced fetch by calling GetMultiShipperCollectionViaOrder(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchShipperCollectionViaOrder
		{
			get	{ return GetAlwaysFetchValueForNavigator("ShipperCollectionViaOrder"); }
			set	{ SetAlwaysFetchValueForNavigator("ShipperCollectionViaOrder", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property ShipperCollectionViaOrder already has been fetched. Setting this property to false when ShipperCollectionViaOrder has been fetched
		/// will clear the ShipperCollectionViaOrder collection well. Setting this property to true while ShipperCollectionViaOrder hasn't been fetched disables lazy loading for ShipperCollectionViaOrder</summary>
		[Browsable(false)]
		public bool AlreadyFetchedShipperCollectionViaOrder
		{
			get { return GetAlreadyFetchedValueForNavigator("ShipperCollectionViaOrder");}
			set { SetAlreadyFetchedValueForNavigator("ShipperCollectionViaOrder", value, true);}
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples
{
	public enum CustomerFieldIndex
	{
		///<summary>Address. </summary>
		Address,
		///<summary>City. </summary>
		City,
		///<summary>CompanyName. </summary>
		CompanyName,
		///<summary>ContactName. </summary>
		ContactName,
		///<summary>ContactTitle. </summary>
		ContactTitle,
		///<summary>Country. </summary>
		Country,
		///<summary>CustomerId. </summary>
		CustomerId,
		///<summary>Fax. </summary>
		Fax,
		///<summary>Phone. </summary>
		Phone,
		///<summary>PostalCode. </summary>
		PostalCode,
		///<summary>Region. </summary>
		Region,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Customer. </summary>
	public partial class CustomerRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CustomerEntity and CustomerCustomerDemoEntity over the 1:n relation they have, using the relation between the fields: Customer.CustomerId - CustomerCustomerDemo.CustomerId</summary>
		public virtual IEntityRelation CustomerCustomerDemoEntityUsingCustomerId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomerCustomerDemo", true, new[] { CustomerFields.CustomerId, CustomerCustomerDemoFields.CustomerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CustomerEntity and OrderEntity over the 1:n relation they have, using the relation between the fields: Customer.CustomerId - Order.CustomerId</summary>
		public virtual IEntityRelation OrderEntityUsingCustomerId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Orders", true, new[] { CustomerFields.CustomerId, OrderFields.CustomerId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomerRelations
	{
		internal static readonly IEntityRelation CustomerCustomerDemoEntityUsingCustomerIdStatic = new CustomerRelations().CustomerCustomerDemoEntityUsingCustomerId;
		internal static readonly IEntityRelation OrderEntityUsingCustomerIdStatic = new CustomerRelations().OrderEntityUsingCustomerId;

		/// <summary>CTor</summary>
		static StaticCustomerRelations() { }
	}
}
