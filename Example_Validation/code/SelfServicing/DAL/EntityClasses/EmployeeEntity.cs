//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:31:17
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.FactoryClasses;
using SD.LLBLGen.Pro.Examples.DaoClasses;
using SD.LLBLGen.Pro.Examples.RelationClasses;
using SD.LLBLGen.Pro.Examples.HelperClasses;
using SD.LLBLGen.Pro.Examples.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Employee'. <br/><br/></summary>
	[Serializable]
	public partial class EmployeeEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection	_employees;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection	_employeeTerritories;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection	_orders;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection _customerCollectionViaOrder;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection _shipperCollectionViaOrder;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection _territoryCollectionViaEmployeeTerritory;
		private EmployeeEntity _employeeSuperior;
		private bool	_employeeSuperiorReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static EmployeeEntityStaticMetaData _staticMetaData = new EmployeeEntityStaticMetaData();
		private static EmployeeRelations _relationsFactory = new EmployeeRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name EmployeeSuperior</summary>
			public static readonly string EmployeeSuperior = "EmployeeSuperior";
			/// <summary>Member name Employees</summary>
			public static readonly string Employees = "Employees";
			/// <summary>Member name EmployeeTerritories</summary>
			public static readonly string EmployeeTerritories = "EmployeeTerritories";
			/// <summary>Member name Orders</summary>
			public static readonly string Orders = "Orders";
			/// <summary>Member name CustomerCollectionViaOrder</summary>
			public static readonly string CustomerCollectionViaOrder = "CustomerCollectionViaOrder";
			/// <summary>Member name ShipperCollectionViaOrder</summary>
			public static readonly string ShipperCollectionViaOrder = "ShipperCollectionViaOrder";
			/// <summary>Member name TerritoryCollectionViaEmployeeTerritory</summary>
			public static readonly string TerritoryCollectionViaEmployeeTerritory = "TerritoryCollectionViaEmployeeTerritory";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class EmployeeEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public EmployeeEntityStaticMetaData()
			{
				SetEntityCoreInfo("EmployeeEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeEntity, typeof(EmployeeEntity), typeof(EmployeeEntityFactory), false);
				AddNavigatorMetaData<EmployeeEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection>("Employees", a => a._employees, (a, b) => a._employees = b, a => a.Employees, () => new EmployeeRelations().EmployeeEntityUsingReportsTo, typeof(EmployeeEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeEntity);
				AddNavigatorMetaData<EmployeeEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection>("EmployeeTerritories", a => a._employeeTerritories, (a, b) => a._employeeTerritories = b, a => a.EmployeeTerritories, () => new EmployeeRelations().EmployeeTerritoryEntityUsingEmployeeId, typeof(EmployeeTerritoryEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeTerritoryEntity);
				AddNavigatorMetaData<EmployeeEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection>("Orders", a => a._orders, (a, b) => a._orders = b, a => a.Orders, () => new EmployeeRelations().OrderEntityUsingEmployeeId, typeof(OrderEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.OrderEntity);
				AddNavigatorMetaData<EmployeeEntity, EmployeeEntity>("EmployeeSuperior", "Employees", (a, b) => a._employeeSuperior = b, a => a._employeeSuperior, (a, b) => a.EmployeeSuperior = b, SD.LLBLGen.Pro.Examples.RelationClasses.StaticEmployeeRelations.EmployeeEntityUsingEmployeeIdReportsToStatic, ()=>new EmployeeRelations().EmployeeEntityUsingEmployeeIdReportsTo, null, new int[] { (int)EmployeeFieldIndex.ReportsTo }, null, true, (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeEntity);
				AddNavigatorMetaData<EmployeeEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection>("CustomerCollectionViaOrder", a => a._customerCollectionViaOrder, (a, b) => a._customerCollectionViaOrder = b, a => a.CustomerCollectionViaOrder, () => new EmployeeRelations().OrderEntityUsingEmployeeId, () => new OrderRelations().CustomerEntityUsingCustomerId, "EmployeeEntity__", "Order_", typeof(CustomerEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerEntity);
				AddNavigatorMetaData<EmployeeEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection>("ShipperCollectionViaOrder", a => a._shipperCollectionViaOrder, (a, b) => a._shipperCollectionViaOrder = b, a => a.ShipperCollectionViaOrder, () => new EmployeeRelations().OrderEntityUsingEmployeeId, () => new OrderRelations().ShipperEntityUsingShipVia, "EmployeeEntity__", "Order_", typeof(ShipperEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.ShipperEntity);
				AddNavigatorMetaData<EmployeeEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection>("TerritoryCollectionViaEmployeeTerritory", a => a._territoryCollectionViaEmployeeTerritory, (a, b) => a._territoryCollectionViaEmployeeTerritory = b, a => a.TerritoryCollectionViaEmployeeTerritory, () => new EmployeeRelations().EmployeeTerritoryEntityUsingEmployeeId, () => new EmployeeTerritoryRelations().TerritoryEntityUsingTerritoryId, "EmployeeEntity__", "EmployeeTerritory_", typeof(TerritoryEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.TerritoryEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static EmployeeEntity()
		{
		}

		/// <summary>CTor</summary>
		public EmployeeEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		public EmployeeEntity(System.Int32 employeeId)
		{
			InitClassFetch(employeeId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public EmployeeEntity(System.Int32 employeeId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(employeeId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="validator">The custom validator object for this EmployeeEntity</param>
		public EmployeeEntity(System.Int32 employeeId, IValidator validator)
		{
			InitClassFetch(employeeId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected EmployeeEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId)
		{
			return FetchUsingPK(employeeId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(employeeId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(employeeId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(employeeId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.EmployeeId, null, null, null);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'EmployeeEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployees(bool forceFetch)
		{
			return GetMultiEmployees(forceFetch, _employees.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'EmployeeEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployees(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiEmployees(forceFetch, _employees.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployees(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiEmployees(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployees(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection>("Employees", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(this, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'Employees'. These settings will be taken into account
		/// when the property Employees is requested or GetMultiEmployees is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersEmployees(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_employees.SortClauses=sortClauses;
			_employees.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'EmployeeTerritoryEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'EmployeeTerritoryEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection GetMultiEmployeeTerritories(bool forceFetch)
		{
			return GetMultiEmployeeTerritories(forceFetch, _employeeTerritories.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeTerritoryEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'EmployeeTerritoryEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection GetMultiEmployeeTerritories(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiEmployeeTerritories(forceFetch, _employeeTerritories.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeTerritoryEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection GetMultiEmployeeTerritories(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiEmployeeTerritories(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeTerritoryEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection GetMultiEmployeeTerritories(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection>("EmployeeTerritories", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(this, null, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'EmployeeTerritories'. These settings will be taken into account
		/// when the property EmployeeTerritories is requested or GetMultiEmployeeTerritories is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersEmployeeTerritories(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_employeeTerritories.SortClauses=sortClauses;
			_employeeTerritories.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'OrderEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch)
		{
			return GetMultiOrders(forceFetch, _orders.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'OrderEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiOrders(forceFetch, _orders.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiOrders(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection>("Orders", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(null, this, null, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'Orders'. These settings will be taken into account
		/// when the property Orders is requested or GetMultiOrders is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersOrders(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_orders.SortClauses=sortClauses;
			_orders.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'CustomerEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection GetMultiCustomerCollectionViaOrder(bool forceFetch)
		{
			return GetMultiCustomerCollectionViaOrder(forceFetch, _customerCollectionViaOrder.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection GetMultiCustomerCollectionViaOrder(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(EmployeeFields.EmployeeId, ComparisonOperator.Equal, this.EmployeeId, "EmployeeEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection>("CustomerCollectionViaOrder", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'CustomerCollectionViaOrder'. These settings will be taken into account
		/// when the property CustomerCollectionViaOrder is requested or GetMultiCustomerCollectionViaOrder is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersCustomerCollectionViaOrder(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_customerCollectionViaOrder.SortClauses=sortClauses;
			_customerCollectionViaOrder.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'ShipperEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'ShipperEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection GetMultiShipperCollectionViaOrder(bool forceFetch)
		{
			return GetMultiShipperCollectionViaOrder(forceFetch, _shipperCollectionViaOrder.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'ShipperEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection GetMultiShipperCollectionViaOrder(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(EmployeeFields.EmployeeId, ComparisonOperator.Equal, this.EmployeeId, "EmployeeEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection>("ShipperCollectionViaOrder", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'ShipperCollectionViaOrder'. These settings will be taken into account
		/// when the property ShipperCollectionViaOrder is requested or GetMultiShipperCollectionViaOrder is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersShipperCollectionViaOrder(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_shipperCollectionViaOrder.SortClauses=sortClauses;
			_shipperCollectionViaOrder.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'TerritoryEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'TerritoryEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection GetMultiTerritoryCollectionViaEmployeeTerritory(bool forceFetch)
		{
			return GetMultiTerritoryCollectionViaEmployeeTerritory(forceFetch, _territoryCollectionViaEmployeeTerritory.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'TerritoryEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection GetMultiTerritoryCollectionViaEmployeeTerritory(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(EmployeeFields.EmployeeId, ComparisonOperator.Equal, this.EmployeeId, "EmployeeEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection>("TerritoryCollectionViaEmployeeTerritory", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'TerritoryCollectionViaEmployeeTerritory'. These settings will be taken into account
		/// when the property TerritoryCollectionViaEmployeeTerritory is requested or GetMultiTerritoryCollectionViaEmployeeTerritory is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersTerritoryCollectionViaEmployeeTerritory(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_territoryCollectionViaEmployeeTerritory.SortClauses=sortClauses;
			_territoryCollectionViaEmployeeTerritory.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves the related entity of type 'EmployeeEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'EmployeeEntity' which is related to this entity.</returns>
		public virtual EmployeeEntity GetSingleEmployeeSuperior(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<EmployeeEntity>("EmployeeSuperior", forceFetch, _employeeSuperiorReturnsNewIfNotFound, e=>e.FetchUsingPK(this.ReportsTo.GetValueOrDefault()));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="validator">The validator object for this EmployeeEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Int32 employeeId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(employeeId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			_employees = new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection();
			_employees.SetContainingEntityInfo(this, "EmployeeSuperior");

			_employeeTerritories = new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection();
			_employeeTerritories.SetContainingEntityInfo(this, "Employee");

			_orders = new SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection();
			_orders.SetContainingEntityInfo(this, "Employee");
			_customerCollectionViaOrder = new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection();
			_shipperCollectionViaOrder = new SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection();
			_territoryCollectionViaEmployeeTerritory = new SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection();
			_employeeSuperiorReturnsNewIfNotFound = true;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="employeeId">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.Int32 employeeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)EmployeeFieldIndex.EmployeeId].ForcedCurrentValueWrite(employeeId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateEmployeeDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static EmployeeRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Employee' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathEmployees { get { return _staticMetaData.GetPrefetchPathElement("Employees", new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'EmployeeTerritory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathEmployeeTerritories { get { return _staticMetaData.GetPrefetchPathElement("EmployeeTerritories", new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Order' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathOrders { get { return _staticMetaData.GetPrefetchPathElement("Orders", new SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Customer'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerCollectionViaOrder { get { return _staticMetaData.GetPrefetchPathElement("CustomerCollectionViaOrder", new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Shipper'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathShipperCollectionViaOrder { get { return _staticMetaData.GetPrefetchPathElement("ShipperCollectionViaOrder", new SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Territory'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathTerritoryCollectionViaEmployeeTerritory { get { return _staticMetaData.GetPrefetchPathElement("TerritoryCollectionViaEmployeeTerritory", new SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Employee'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathEmployeeSuperior { get { return _staticMetaData.GetPrefetchPathElement("EmployeeSuperior", new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection()); } }


		/// <summary>The Address property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Address"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Address
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Address, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Address, value, true); }
		}

		/// <summary>The BirthDate property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."BirthDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> BirthDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)EmployeeFieldIndex.BirthDate, false); }
			set	{ SetValue((int)EmployeeFieldIndex.BirthDate, value, true); }
		}

		/// <summary>The City property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."City"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String City
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.City, true); }
			set	{ SetValue((int)EmployeeFieldIndex.City, value, true); }
		}

		/// <summary>The Country property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Country"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Country
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Country, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Country, value, true); }
		}

		/// <summary>The EmployeeId property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."EmployeeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 EmployeeId
		{
			get { return (System.Int32)GetValue((int)EmployeeFieldIndex.EmployeeId, true); }
			set	{ SetValue((int)EmployeeFieldIndex.EmployeeId, value, true); }
		}

		/// <summary>The Extension property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Extension"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 4<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Extension
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Extension, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Extension, value, true); }
		}

		/// <summary>The FirstName property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."FirstName"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FirstName
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.FirstName, true); }
			set	{ SetValue((int)EmployeeFieldIndex.FirstName, value, true); }
		}

		/// <summary>The HireDate property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."HireDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> HireDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)EmployeeFieldIndex.HireDate, false); }
			set	{ SetValue((int)EmployeeFieldIndex.HireDate, value, true); }
		}

		/// <summary>The HomePhone property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."HomePhone"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String HomePhone
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.HomePhone, true); }
			set	{ SetValue((int)EmployeeFieldIndex.HomePhone, value, true); }
		}

		/// <summary>The LastName property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."LastName"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 20<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.LastName, true); }
			set	{ SetValue((int)EmployeeFieldIndex.LastName, value, true); }
		}

		/// <summary>The Notes property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Notes"<br/>
		/// Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Notes
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Notes, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Notes, value, true); }
		}

		/// <summary>The Photo property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Photo"<br/>
		/// Table field type characteristics (type, precision, scale, length): Image, 0, 0, 2147483647<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.Byte[] Photo
		{
			get { return (System.Byte[])GetValue((int)EmployeeFieldIndex.Photo, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Photo, value, true); }
		}

		/// <summary>The PhotoPath property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."PhotoPath"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PhotoPath
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.PhotoPath, true); }
			set	{ SetValue((int)EmployeeFieldIndex.PhotoPath, value, true); }
		}

		/// <summary>The PostalCode property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."PostalCode"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostalCode
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.PostalCode, true); }
			set	{ SetValue((int)EmployeeFieldIndex.PostalCode, value, true); }
		}

		/// <summary>The Region property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Region"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Region
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Region, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Region, value, true); }
		}

		/// <summary>The ReportsTo property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."ReportsTo"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ReportsTo
		{
			get { return (Nullable<System.Int32>)GetValue((int)EmployeeFieldIndex.ReportsTo, false); }
			set	{ SetValue((int)EmployeeFieldIndex.ReportsTo, value, true); }
		}

		/// <summary>The Title property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Title"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Title
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Title, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Title, value, true); }
		}

		/// <summary>The TitleOfCourtesy property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."TitleOfCourtesy"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 25<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String TitleOfCourtesy
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.TitleOfCourtesy, true); }
			set	{ SetValue((int)EmployeeFieldIndex.TitleOfCourtesy, value, true); }
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection Employees { get { return GetMultiEmployees(false); } }

		/// <summary>Gets / sets the lazy loading flag for Employees. When set to true, Employees is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Employees is accessed. You can always execute/ a forced fetch by calling GetMultiEmployees(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchEmployees
		{
			get	{ return GetAlwaysFetchValueForNavigator("Employees"); }
			set	{ SetAlwaysFetchValueForNavigator("Employees", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property Employees already has been fetched. Setting this property to false when Employees has been fetched
		/// will clear the Employees collection well. Setting this property to true while Employees hasn't been fetched disables lazy loading for Employees</summary>
		[Browsable(false)]
		public bool AlreadyFetchedEmployees
		{
			get { return GetAlreadyFetchedValueForNavigator("Employees");}
			set { SetAlreadyFetchedValueForNavigator("Employees", value, true);}
		}
		/// <summary>Retrieves all related entities of type 'EmployeeTerritoryEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeTerritoryCollection EmployeeTerritories { get { return GetMultiEmployeeTerritories(false); } }

		/// <summary>Gets / sets the lazy loading flag for EmployeeTerritories. When set to true, EmployeeTerritories is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time EmployeeTerritories is accessed. You can always execute/ a forced fetch by calling GetMultiEmployeeTerritories(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchEmployeeTerritories
		{
			get	{ return GetAlwaysFetchValueForNavigator("EmployeeTerritories"); }
			set	{ SetAlwaysFetchValueForNavigator("EmployeeTerritories", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property EmployeeTerritories already has been fetched. Setting this property to false when EmployeeTerritories has been fetched
		/// will clear the EmployeeTerritories collection well. Setting this property to true while EmployeeTerritories hasn't been fetched disables lazy loading for EmployeeTerritories</summary>
		[Browsable(false)]
		public bool AlreadyFetchedEmployeeTerritories
		{
			get { return GetAlreadyFetchedValueForNavigator("EmployeeTerritories");}
			set { SetAlreadyFetchedValueForNavigator("EmployeeTerritories", value, true);}
		}
		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection Orders { get { return GetMultiOrders(false); } }

		/// <summary>Gets / sets the lazy loading flag for Orders. When set to true, Orders is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Orders is accessed. You can always execute/ a forced fetch by calling GetMultiOrders(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchOrders
		{
			get	{ return GetAlwaysFetchValueForNavigator("Orders"); }
			set	{ SetAlwaysFetchValueForNavigator("Orders", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property Orders already has been fetched. Setting this property to false when Orders has been fetched
		/// will clear the Orders collection well. Setting this property to true while Orders hasn't been fetched disables lazy loading for Orders</summary>
		[Browsable(false)]
		public bool AlreadyFetchedOrders
		{
			get { return GetAlreadyFetchedValueForNavigator("Orders");}
			set { SetAlreadyFetchedValueForNavigator("Orders", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection CustomerCollectionViaOrder { get { return GetMultiCustomerCollectionViaOrder(false); } }

		/// <summary>Gets / sets the lazy loading flag for CustomerCollectionViaOrder. When set to true, CustomerCollectionViaOrder is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerCollectionViaOrder is accessed. You can always execute a forced fetch by calling GetMultiCustomerCollectionViaOrder(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerCollectionViaOrder
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerCollectionViaOrder"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerCollectionViaOrder", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerCollectionViaOrder already has been fetched. Setting this property to false when CustomerCollectionViaOrder has been fetched
		/// will clear the CustomerCollectionViaOrder collection well. Setting this property to true while CustomerCollectionViaOrder hasn't been fetched disables lazy loading for CustomerCollectionViaOrder</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerCollectionViaOrder
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerCollectionViaOrder");}
			set { SetAlreadyFetchedValueForNavigator("CustomerCollectionViaOrder", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'ShipperEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.ShipperCollection ShipperCollectionViaOrder { get { return GetMultiShipperCollectionViaOrder(false); } }

		/// <summary>Gets / sets the lazy loading flag for ShipperCollectionViaOrder. When set to true, ShipperCollectionViaOrder is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time ShipperCollectionViaOrder is accessed. You can always execute a forced fetch by calling GetMultiShipperCollectionViaOrder(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchShipperCollectionViaOrder
		{
			get	{ return GetAlwaysFetchValueForNavigator("ShipperCollectionViaOrder"); }
			set	{ SetAlwaysFetchValueForNavigator("ShipperCollectionViaOrder", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property ShipperCollectionViaOrder already has been fetched. Setting this property to false when ShipperCollectionViaOrder has been fetched
		/// will clear the ShipperCollectionViaOrder collection well. Setting this property to true while ShipperCollectionViaOrder hasn't been fetched disables lazy loading for ShipperCollectionViaOrder</summary>
		[Browsable(false)]
		public bool AlreadyFetchedShipperCollectionViaOrder
		{
			get { return GetAlreadyFetchedValueForNavigator("ShipperCollectionViaOrder");}
			set { SetAlreadyFetchedValueForNavigator("ShipperCollectionViaOrder", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'TerritoryEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection TerritoryCollectionViaEmployeeTerritory { get { return GetMultiTerritoryCollectionViaEmployeeTerritory(false); } }

		/// <summary>Gets / sets the lazy loading flag for TerritoryCollectionViaEmployeeTerritory. When set to true, TerritoryCollectionViaEmployeeTerritory is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time TerritoryCollectionViaEmployeeTerritory is accessed. You can always execute a forced fetch by calling GetMultiTerritoryCollectionViaEmployeeTerritory(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchTerritoryCollectionViaEmployeeTerritory
		{
			get	{ return GetAlwaysFetchValueForNavigator("TerritoryCollectionViaEmployeeTerritory"); }
			set	{ SetAlwaysFetchValueForNavigator("TerritoryCollectionViaEmployeeTerritory", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property TerritoryCollectionViaEmployeeTerritory already has been fetched. Setting this property to false when TerritoryCollectionViaEmployeeTerritory has been fetched
		/// will clear the TerritoryCollectionViaEmployeeTerritory collection well. Setting this property to true while TerritoryCollectionViaEmployeeTerritory hasn't been fetched disables lazy loading for TerritoryCollectionViaEmployeeTerritory</summary>
		[Browsable(false)]
		public bool AlreadyFetchedTerritoryCollectionViaEmployeeTerritory
		{
			get { return GetAlreadyFetchedValueForNavigator("TerritoryCollectionViaEmployeeTerritory");}
			set { SetAlreadyFetchedValueForNavigator("TerritoryCollectionViaEmployeeTerritory", value, true);}
		}

		/// <summary>Gets / sets related entity of type 'EmployeeEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(true)]
		public virtual EmployeeEntity EmployeeSuperior
		{
			get	{ return GetSingleEmployeeSuperior(false); }
			set { SetSingleRelatedEntityNavigator(value, "EmployeeSuperior"); }
		}

		/// <summary>Gets / sets the lazy loading flag for EmployeeSuperior. When set to true, EmployeeSuperior is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time EmployeeSuperior is accessed. You can always execute a forced fetch by calling GetSingleEmployeeSuperior(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchEmployeeSuperior
		{
			get	{ return GetAlwaysFetchValueForNavigator("EmployeeSuperior"); }
			set	{ SetAlwaysFetchValueForNavigator("EmployeeSuperior", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property EmployeeSuperior already has been fetched. Setting this property to false when EmployeeSuperior has been fetched
		/// will set EmployeeSuperior to null as well. Setting this property to true while EmployeeSuperior hasn't been fetched disables lazy loading for EmployeeSuperior</summary>
		[Browsable(false)]
		public bool AlreadyFetchedEmployeeSuperior
		{
			get { return GetAlreadyFetchedValueForNavigator("EmployeeSuperior");}
			set { SetAlreadyFetchedValueForNavigator("EmployeeSuperior", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property EmployeeSuperior is not found
		/// in the database. When set to true, EmployeeSuperior will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: true.</summary>
		[Browsable(false)]
		public bool EmployeeSuperiorReturnsNewIfNotFound
		{
			get	{ return _employeeSuperiorReturnsNewIfNotFound; }
			set { _employeeSuperiorReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode

        /// <summary>
        /// Gets the full name.
        /// </summary>
        /// <value>The full name.</value>
        public string FullName
        {
            get
            { 
                return FirstName + " " + LastName;
            }
        }

		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples
{
	public enum EmployeeFieldIndex
	{
		///<summary>Address. </summary>
		Address,
		///<summary>BirthDate. </summary>
		BirthDate,
		///<summary>City. </summary>
		City,
		///<summary>Country. </summary>
		Country,
		///<summary>EmployeeId. </summary>
		EmployeeId,
		///<summary>Extension. </summary>
		Extension,
		///<summary>FirstName. </summary>
		FirstName,
		///<summary>HireDate. </summary>
		HireDate,
		///<summary>HomePhone. </summary>
		HomePhone,
		///<summary>LastName. </summary>
		LastName,
		///<summary>Notes. </summary>
		Notes,
		///<summary>Photo. </summary>
		Photo,
		///<summary>PhotoPath. </summary>
		PhotoPath,
		///<summary>PostalCode. </summary>
		PostalCode,
		///<summary>Region. </summary>
		Region,
		///<summary>ReportsTo. </summary>
		ReportsTo,
		///<summary>Title. </summary>
		Title,
		///<summary>TitleOfCourtesy. </summary>
		TitleOfCourtesy,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Employee. </summary>
	public partial class EmployeeRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeeEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeId - Employee.ReportsTo</summary>
		public virtual IEntityRelation EmployeeEntityUsingReportsTo
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Employees", true, new[] { EmployeeFields.EmployeeId, EmployeeFields.ReportsTo }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeeTerritoryEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeId - EmployeeTerritory.EmployeeId</summary>
		public virtual IEntityRelation EmployeeTerritoryEntityUsingEmployeeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeeTerritories", true, new[] { EmployeeFields.EmployeeId, EmployeeTerritoryFields.EmployeeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and OrderEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeId - Order.EmployeeId</summary>
		public virtual IEntityRelation OrderEntityUsingEmployeeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Orders", true, new[] { EmployeeFields.EmployeeId, OrderFields.EmployeeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeeEntity over the m:1 relation they have, using the relation between the fields: Employee.ReportsTo - Employee.EmployeeId</summary>
		public virtual IEntityRelation EmployeeEntityUsingEmployeeIdReportsTo
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "EmployeeSuperior", false, new[] { EmployeeFields.EmployeeId, EmployeeFields.ReportsTo }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticEmployeeRelations
	{
		internal static readonly IEntityRelation EmployeeEntityUsingReportsToStatic = new EmployeeRelations().EmployeeEntityUsingReportsTo;
		internal static readonly IEntityRelation EmployeeTerritoryEntityUsingEmployeeIdStatic = new EmployeeRelations().EmployeeTerritoryEntityUsingEmployeeId;
		internal static readonly IEntityRelation OrderEntityUsingEmployeeIdStatic = new EmployeeRelations().OrderEntityUsingEmployeeId;
		internal static readonly IEntityRelation EmployeeEntityUsingEmployeeIdReportsToStatic = new EmployeeRelations().EmployeeEntityUsingEmployeeIdReportsTo;

		/// <summary>CTor</summary>
		static StaticEmployeeRelations() { }
	}
}
