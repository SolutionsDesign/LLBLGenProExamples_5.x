//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:31:17
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.FactoryClasses;
using SD.LLBLGen.Pro.Examples.DaoClasses;
using SD.LLBLGen.Pro.Examples.RelationClasses;
using SD.LLBLGen.Pro.Examples.HelperClasses;
using SD.LLBLGen.Pro.Examples.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'EmployeeTerritory'. <br/><br/></summary>
	[Serializable]
	public partial class EmployeeTerritoryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EmployeeEntity _employee;
		private bool	_employeeReturnsNewIfNotFound;
		private TerritoryEntity _territory;
		private bool	_territoryReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static EmployeeTerritoryEntityStaticMetaData _staticMetaData = new EmployeeTerritoryEntityStaticMetaData();
		private static EmployeeTerritoryRelations _relationsFactory = new EmployeeTerritoryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Employee</summary>
			public static readonly string Employee = "Employee";
			/// <summary>Member name Territory</summary>
			public static readonly string Territory = "Territory";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class EmployeeTerritoryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public EmployeeTerritoryEntityStaticMetaData()
			{
				SetEntityCoreInfo("EmployeeTerritoryEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeTerritoryEntity, typeof(EmployeeTerritoryEntity), typeof(EmployeeTerritoryEntityFactory), false);
				AddNavigatorMetaData<EmployeeTerritoryEntity, EmployeeEntity>("Employee", "EmployeeTerritories", (a, b) => a._employee = b, a => a._employee, (a, b) => a.Employee = b, SD.LLBLGen.Pro.Examples.RelationClasses.StaticEmployeeTerritoryRelations.EmployeeEntityUsingEmployeeIdStatic, ()=>new EmployeeTerritoryRelations().EmployeeEntityUsingEmployeeId, null, new int[] { (int)EmployeeTerritoryFieldIndex.EmployeeId }, null, true, (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeEntity);
				AddNavigatorMetaData<EmployeeTerritoryEntity, TerritoryEntity>("Territory", "EmployeeTerritories", (a, b) => a._territory = b, a => a._territory, (a, b) => a.Territory = b, SD.LLBLGen.Pro.Examples.RelationClasses.StaticEmployeeTerritoryRelations.TerritoryEntityUsingTerritoryIdStatic, ()=>new EmployeeTerritoryRelations().TerritoryEntityUsingTerritoryId, null, new int[] { (int)EmployeeTerritoryFieldIndex.TerritoryId }, null, true, (int)SD.LLBLGen.Pro.Examples.EntityType.TerritoryEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static EmployeeTerritoryEntity()
		{
		}

		/// <summary>CTor</summary>
		public EmployeeTerritoryEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		public EmployeeTerritoryEntity(System.Int32 employeeId, System.String territoryId)
		{
			InitClassFetch(employeeId, territoryId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public EmployeeTerritoryEntity(System.Int32 employeeId, System.String territoryId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(employeeId, territoryId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="validator">The custom validator object for this EmployeeTerritoryEntity</param>
		public EmployeeTerritoryEntity(System.Int32 employeeId, System.String territoryId, IValidator validator)
		{
			InitClassFetch(employeeId, territoryId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected EmployeeTerritoryEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId, System.String territoryId)
		{
			return FetchUsingPK(employeeId, territoryId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId, System.String territoryId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(employeeId, territoryId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId, System.String territoryId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(employeeId, territoryId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 employeeId, System.String territoryId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(employeeId, territoryId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.EmployeeId, this.TerritoryId, null, null, null);
		}

		/// <summary>Retrieves the related entity of type 'EmployeeEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'EmployeeEntity' which is related to this entity.</returns>
		public virtual EmployeeEntity GetSingleEmployee(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<EmployeeEntity>("Employee", forceFetch, _employeeReturnsNewIfNotFound, e=>e.FetchUsingPK(this.EmployeeId));
		}

		/// <summary>Retrieves the related entity of type 'TerritoryEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'TerritoryEntity' which is related to this entity.</returns>
		public virtual TerritoryEntity GetSingleTerritory(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<TerritoryEntity>("Territory", forceFetch, _territoryReturnsNewIfNotFound, e=>e.FetchUsingPK(this.TerritoryId));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="validator">The validator object for this EmployeeTerritoryEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Int32 employeeId, System.String territoryId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(employeeId, territoryId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{			_employeeReturnsNewIfNotFound = true;
			_territoryReturnsNewIfNotFound = true;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="employeeId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="territoryId">PK value for EmployeeTerritory which data should be fetched into this EmployeeTerritory object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.Int32 employeeId, System.String territoryId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)EmployeeTerritoryFieldIndex.EmployeeId].ForcedCurrentValueWrite(employeeId);
				this.Fields[(int)EmployeeTerritoryFieldIndex.TerritoryId].ForcedCurrentValueWrite(territoryId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateEmployeeTerritoryDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static EmployeeTerritoryRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Employee'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathEmployee { get { return _staticMetaData.GetPrefetchPathElement("Employee", new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Territory'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathTerritory { get { return _staticMetaData.GetPrefetchPathElement("Territory", new SD.LLBLGen.Pro.Examples.CollectionClasses.TerritoryCollection()); } }


		/// <summary>The EmployeeId property of the Entity EmployeeTerritory<br/><br/></summary>
		/// <remarks>Mapped on  table field: "EmployeeTerritories"."EmployeeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 EmployeeId
		{
			get { return (System.Int32)GetValue((int)EmployeeTerritoryFieldIndex.EmployeeId, true); }
			set	{ SetValue((int)EmployeeTerritoryFieldIndex.EmployeeId, value, true); }
		}

		/// <summary>The TerritoryId property of the Entity EmployeeTerritory<br/><br/></summary>
		/// <remarks>Mapped on  table field: "EmployeeTerritories"."TerritoryID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 20<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String TerritoryId
		{
			get { return (System.String)GetValue((int)EmployeeTerritoryFieldIndex.TerritoryId, true); }
			set	{ SetValue((int)EmployeeTerritoryFieldIndex.TerritoryId, value, true); }
		}


		/// <summary>Gets / sets related entity of type 'EmployeeEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(true)]
		public virtual EmployeeEntity Employee
		{
			get	{ return GetSingleEmployee(false); }
			set { SetSingleRelatedEntityNavigator(value, "Employee"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Employee. When set to true, Employee is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Employee is accessed. You can always execute a forced fetch by calling GetSingleEmployee(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchEmployee
		{
			get	{ return GetAlwaysFetchValueForNavigator("Employee"); }
			set	{ SetAlwaysFetchValueForNavigator("Employee", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Employee already has been fetched. Setting this property to false when Employee has been fetched
		/// will set Employee to null as well. Setting this property to true while Employee hasn't been fetched disables lazy loading for Employee</summary>
		[Browsable(false)]
		public bool AlreadyFetchedEmployee
		{
			get { return GetAlreadyFetchedValueForNavigator("Employee");}
			set { SetAlreadyFetchedValueForNavigator("Employee", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Employee is not found
		/// in the database. When set to true, Employee will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: true.</summary>
		[Browsable(false)]
		public bool EmployeeReturnsNewIfNotFound
		{
			get	{ return _employeeReturnsNewIfNotFound; }
			set { _employeeReturnsNewIfNotFound = value; }	
		}

		/// <summary>Gets / sets related entity of type 'TerritoryEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(true)]
		public virtual TerritoryEntity Territory
		{
			get	{ return GetSingleTerritory(false); }
			set { SetSingleRelatedEntityNavigator(value, "Territory"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Territory. When set to true, Territory is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Territory is accessed. You can always execute a forced fetch by calling GetSingleTerritory(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchTerritory
		{
			get	{ return GetAlwaysFetchValueForNavigator("Territory"); }
			set	{ SetAlwaysFetchValueForNavigator("Territory", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Territory already has been fetched. Setting this property to false when Territory has been fetched
		/// will set Territory to null as well. Setting this property to true while Territory hasn't been fetched disables lazy loading for Territory</summary>
		[Browsable(false)]
		public bool AlreadyFetchedTerritory
		{
			get { return GetAlreadyFetchedValueForNavigator("Territory");}
			set { SetAlreadyFetchedValueForNavigator("Territory", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Territory is not found
		/// in the database. When set to true, Territory will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: true.</summary>
		[Browsable(false)]
		public bool TerritoryReturnsNewIfNotFound
		{
			get	{ return _territoryReturnsNewIfNotFound; }
			set { _territoryReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples
{
	public enum EmployeeTerritoryFieldIndex
	{
		///<summary>EmployeeId. </summary>
		EmployeeId,
		///<summary>TerritoryId. </summary>
		TerritoryId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: EmployeeTerritory. </summary>
	public partial class EmployeeTerritoryRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between EmployeeTerritoryEntity and EmployeeEntity over the m:1 relation they have, using the relation between the fields: EmployeeTerritory.EmployeeId - Employee.EmployeeId</summary>
		public virtual IEntityRelation EmployeeEntityUsingEmployeeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Employee", false, new[] { EmployeeFields.EmployeeId, EmployeeTerritoryFields.EmployeeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeTerritoryEntity and TerritoryEntity over the m:1 relation they have, using the relation between the fields: EmployeeTerritory.TerritoryId - Territory.TerritoryId</summary>
		public virtual IEntityRelation TerritoryEntityUsingTerritoryId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Territory", false, new[] { TerritoryFields.TerritoryId, EmployeeTerritoryFields.TerritoryId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticEmployeeTerritoryRelations
	{
		internal static readonly IEntityRelation EmployeeEntityUsingEmployeeIdStatic = new EmployeeTerritoryRelations().EmployeeEntityUsingEmployeeId;
		internal static readonly IEntityRelation TerritoryEntityUsingTerritoryIdStatic = new EmployeeTerritoryRelations().TerritoryEntityUsingTerritoryId;

		/// <summary>CTor</summary>
		static StaticEmployeeTerritoryRelations() { }
	}
}
