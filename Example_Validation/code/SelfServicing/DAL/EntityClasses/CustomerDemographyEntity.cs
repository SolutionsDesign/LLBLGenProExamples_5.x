//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:31:17
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.FactoryClasses;
using SD.LLBLGen.Pro.Examples.DaoClasses;
using SD.LLBLGen.Pro.Examples.RelationClasses;
using SD.LLBLGen.Pro.Examples.HelperClasses;
using SD.LLBLGen.Pro.Examples.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'CustomerDemography'. <br/><br/></summary>
	[Serializable]
	public partial class CustomerDemographyEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection	_customerCustomerDemo;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection _customerCollectionViaCustomerCustomerDemo;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CustomerDemographyEntityStaticMetaData _staticMetaData = new CustomerDemographyEntityStaticMetaData();
		private static CustomerDemographyRelations _relationsFactory = new CustomerDemographyRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CustomerCustomerDemo</summary>
			public static readonly string CustomerCustomerDemo = "CustomerCustomerDemo";
			/// <summary>Member name CustomerCollectionViaCustomerCustomerDemo</summary>
			public static readonly string CustomerCollectionViaCustomerCustomerDemo = "CustomerCollectionViaCustomerCustomerDemo";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomerDemographyEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomerDemographyEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomerDemographyEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerDemographyEntity, typeof(CustomerDemographyEntity), typeof(CustomerDemographyEntityFactory), false);
				AddNavigatorMetaData<CustomerDemographyEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection>("CustomerCustomerDemo", a => a._customerCustomerDemo, (a, b) => a._customerCustomerDemo = b, a => a.CustomerCustomerDemo, () => new CustomerDemographyRelations().CustomerCustomerDemoEntityUsingCustomerTypeId, typeof(CustomerCustomerDemoEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerCustomerDemoEntity);
				AddNavigatorMetaData<CustomerDemographyEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection>("CustomerCollectionViaCustomerCustomerDemo", a => a._customerCollectionViaCustomerCustomerDemo, (a, b) => a._customerCollectionViaCustomerCustomerDemo = b, a => a.CustomerCollectionViaCustomerCustomerDemo, () => new CustomerDemographyRelations().CustomerCustomerDemoEntityUsingCustomerTypeId, () => new CustomerCustomerDemoRelations().CustomerEntityUsingCustomerId, "CustomerDemographyEntity__", "CustomerCustomerDemo_", typeof(CustomerEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static CustomerDemographyEntity()
		{
		}

		/// <summary>CTor</summary>
		public CustomerDemographyEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		public CustomerDemographyEntity(System.String customerTypeId)
		{
			InitClassFetch(customerTypeId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public CustomerDemographyEntity(System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(customerTypeId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="validator">The custom validator object for this CustomerDemographyEntity</param>
		public CustomerDemographyEntity(System.String customerTypeId, IValidator validator)
		{
			InitClassFetch(customerTypeId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomerDemographyEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId)
		{
			return FetchUsingPK(customerTypeId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(customerTypeId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(customerTypeId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(customerTypeId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.CustomerTypeId, null, null, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'CustomerCustomerDemoEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch)
		{
			return GetMultiCustomerCustomerDemo(forceFetch, _customerCustomerDemo.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'CustomerCustomerDemoEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiCustomerCustomerDemo(forceFetch, _customerCustomerDemo.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiCustomerCustomerDemo(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemo(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection>("CustomerCustomerDemo", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(null, this, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'CustomerCustomerDemo'. These settings will be taken into account
		/// when the property CustomerCustomerDemo is requested or GetMultiCustomerCustomerDemo is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersCustomerCustomerDemo(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_customerCustomerDemo.SortClauses=sortClauses;
			_customerCustomerDemo.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'CustomerEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection GetMultiCustomerCollectionViaCustomerCustomerDemo(bool forceFetch)
		{
			return GetMultiCustomerCollectionViaCustomerCustomerDemo(forceFetch, _customerCollectionViaCustomerCustomerDemo.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection GetMultiCustomerCollectionViaCustomerCustomerDemo(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(CustomerDemographyFields.CustomerTypeId, ComparisonOperator.Equal, this.CustomerTypeId, "CustomerDemographyEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection>("CustomerCollectionViaCustomerCustomerDemo", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'CustomerCollectionViaCustomerCustomerDemo'. These settings will be taken into account
		/// when the property CustomerCollectionViaCustomerCustomerDemo is requested or GetMultiCustomerCollectionViaCustomerCustomerDemo is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersCustomerCollectionViaCustomerCustomerDemo(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_customerCollectionViaCustomerCustomerDemo.SortClauses=sortClauses;
			_customerCollectionViaCustomerCustomerDemo.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="validator">The validator object for this CustomerDemographyEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.String customerTypeId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(customerTypeId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			_customerCustomerDemo = new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection();
			_customerCustomerDemo.SetContainingEntityInfo(this, "CustomerDemography");
			_customerCollectionViaCustomerCustomerDemo = new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection();
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)CustomerDemographyFieldIndex.CustomerTypeId].ForcedCurrentValueWrite(customerTypeId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateCustomerDemographyDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomerDemographyRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'CustomerCustomerDemo' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerCustomerDemo { get { return _staticMetaData.GetPrefetchPathElement("CustomerCustomerDemo", new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Customer'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerCollectionViaCustomerCustomerDemo { get { return _staticMetaData.GetPrefetchPathElement("CustomerCollectionViaCustomerCustomerDemo", new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection()); } }


		/// <summary>The CustomerDesc property of the Entity CustomerDemography<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerDemographics"."CustomerDesc"<br/>
		/// Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CustomerDesc
		{
			get { return (System.String)GetValue((int)CustomerDemographyFieldIndex.CustomerDesc, true); }
			set	{ SetValue((int)CustomerDemographyFieldIndex.CustomerDesc, value, true); }
		}

		/// <summary>The CustomerTypeId property of the Entity CustomerDemography<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerDemographics"."CustomerTypeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerTypeId
		{
			get { return (System.String)GetValue((int)CustomerDemographyFieldIndex.CustomerTypeId, true); }
			set	{ SetValue((int)CustomerDemographyFieldIndex.CustomerTypeId, value, true); }
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCustomerDemoCollection CustomerCustomerDemo { get { return GetMultiCustomerCustomerDemo(false); } }

		/// <summary>Gets / sets the lazy loading flag for CustomerCustomerDemo. When set to true, CustomerCustomerDemo is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerCustomerDemo is accessed. You can always execute/ a forced fetch by calling GetMultiCustomerCustomerDemo(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerCustomerDemo
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerCustomerDemo"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerCustomerDemo", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerCustomerDemo already has been fetched. Setting this property to false when CustomerCustomerDemo has been fetched
		/// will clear the CustomerCustomerDemo collection well. Setting this property to true while CustomerCustomerDemo hasn't been fetched disables lazy loading for CustomerCustomerDemo</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerCustomerDemo
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerCustomerDemo");}
			set { SetAlreadyFetchedValueForNavigator("CustomerCustomerDemo", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection CustomerCollectionViaCustomerCustomerDemo { get { return GetMultiCustomerCollectionViaCustomerCustomerDemo(false); } }

		/// <summary>Gets / sets the lazy loading flag for CustomerCollectionViaCustomerCustomerDemo. When set to true, CustomerCollectionViaCustomerCustomerDemo is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerCollectionViaCustomerCustomerDemo is accessed. You can always execute a forced fetch by calling GetMultiCustomerCollectionViaCustomerCustomerDemo(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerCollectionViaCustomerCustomerDemo
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerCollectionViaCustomerCustomerDemo"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerCollectionViaCustomerCustomerDemo", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerCollectionViaCustomerCustomerDemo already has been fetched. Setting this property to false when CustomerCollectionViaCustomerCustomerDemo has been fetched
		/// will clear the CustomerCollectionViaCustomerCustomerDemo collection well. Setting this property to true while CustomerCollectionViaCustomerCustomerDemo hasn't been fetched disables lazy loading for CustomerCollectionViaCustomerCustomerDemo</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerCollectionViaCustomerCustomerDemo
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerCollectionViaCustomerCustomerDemo");}
			set { SetAlreadyFetchedValueForNavigator("CustomerCollectionViaCustomerCustomerDemo", value, true);}
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples
{
	public enum CustomerDemographyFieldIndex
	{
		///<summary>CustomerDesc. </summary>
		CustomerDesc,
		///<summary>CustomerTypeId. </summary>
		CustomerTypeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CustomerDemography. </summary>
	public partial class CustomerDemographyRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CustomerDemographyEntity and CustomerCustomerDemoEntity over the 1:n relation they have, using the relation between the fields: CustomerDemography.CustomerTypeId - CustomerCustomerDemo.CustomerTypeId</summary>
		public virtual IEntityRelation CustomerCustomerDemoEntityUsingCustomerTypeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomerCustomerDemo", true, new[] { CustomerDemographyFields.CustomerTypeId, CustomerCustomerDemoFields.CustomerTypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomerDemographyRelations
	{
		internal static readonly IEntityRelation CustomerCustomerDemoEntityUsingCustomerTypeIdStatic = new CustomerDemographyRelations().CustomerCustomerDemoEntityUsingCustomerTypeId;

		/// <summary>CTor</summary>
		static StaticCustomerDemographyRelations() { }
	}
}
