//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:31:17
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.FactoryClasses;
using SD.LLBLGen.Pro.Examples.DaoClasses;
using SD.LLBLGen.Pro.Examples.RelationClasses;
using SD.LLBLGen.Pro.Examples.HelperClasses;
using SD.LLBLGen.Pro.Examples.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Shipper'. <br/><br/></summary>
	[Serializable]
	public partial class ShipperEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection	_orders;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection _customerCollectionViaOrders;
		private SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection _employeeCollectionViaOrders;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static ShipperEntityStaticMetaData _staticMetaData = new ShipperEntityStaticMetaData();
		private static ShipperRelations _relationsFactory = new ShipperRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Orders</summary>
			public static readonly string Orders = "Orders";
			/// <summary>Member name CustomerCollectionViaOrders</summary>
			public static readonly string CustomerCollectionViaOrders = "CustomerCollectionViaOrders";
			/// <summary>Member name EmployeeCollectionViaOrders</summary>
			public static readonly string EmployeeCollectionViaOrders = "EmployeeCollectionViaOrders";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ShipperEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ShipperEntityStaticMetaData()
			{
				SetEntityCoreInfo("ShipperEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.EntityType.ShipperEntity, typeof(ShipperEntity), typeof(ShipperEntityFactory), false);
				AddNavigatorMetaData<ShipperEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection>("Orders", a => a._orders, (a, b) => a._orders = b, a => a.Orders, () => new ShipperRelations().OrderEntityUsingShipVia, typeof(OrderEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.OrderEntity);
				AddNavigatorMetaData<ShipperEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection>("CustomerCollectionViaOrders", a => a._customerCollectionViaOrders, (a, b) => a._customerCollectionViaOrders = b, a => a.CustomerCollectionViaOrders, () => new ShipperRelations().OrderEntityUsingShipVia, () => new OrderRelations().CustomerEntityUsingCustomerId, "ShipperEntity__", "Order_", typeof(CustomerEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.CustomerEntity);
				AddNavigatorMetaData<ShipperEntity, SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection>("EmployeeCollectionViaOrders", a => a._employeeCollectionViaOrders, (a, b) => a._employeeCollectionViaOrders = b, a => a.EmployeeCollectionViaOrders, () => new ShipperRelations().OrderEntityUsingShipVia, () => new OrderRelations().EmployeeEntityUsingEmployeeId, "ShipperEntity__", "Order_", typeof(EmployeeEntity), (int)SD.LLBLGen.Pro.Examples.EntityType.EmployeeEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static ShipperEntity()
		{
		}

		/// <summary>CTor</summary>
		public ShipperEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		public ShipperEntity(System.Int32 shipperId)
		{
			InitClassFetch(shipperId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public ShipperEntity(System.Int32 shipperId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(shipperId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="validator">The custom validator object for this ShipperEntity</param>
		public ShipperEntity(System.Int32 shipperId, IValidator validator)
		{
			InitClassFetch(shipperId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ShipperEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 shipperId)
		{
			return FetchUsingPK(shipperId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 shipperId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(shipperId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 shipperId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(shipperId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 shipperId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(shipperId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.ShipperId, null, null, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'OrderEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch)
		{
			return GetMultiOrders(forceFetch, _orders.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'OrderEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiOrders(forceFetch, _orders.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiOrders(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection GetMultiOrders(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection>("Orders", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(null, null, this, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'Orders'. These settings will be taken into account
		/// when the property Orders is requested or GetMultiOrders is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersOrders(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_orders.SortClauses=sortClauses;
			_orders.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'CustomerEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection GetMultiCustomerCollectionViaOrders(bool forceFetch)
		{
			return GetMultiCustomerCollectionViaOrders(forceFetch, _customerCollectionViaOrders.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection GetMultiCustomerCollectionViaOrders(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(ShipperFields.ShipperId, ComparisonOperator.Equal, this.ShipperId, "ShipperEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection>("CustomerCollectionViaOrders", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'CustomerCollectionViaOrders'. These settings will be taken into account
		/// when the property CustomerCollectionViaOrders is requested or GetMultiCustomerCollectionViaOrders is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersCustomerCollectionViaOrders(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_customerCollectionViaOrders.SortClauses=sortClauses;
			_customerCollectionViaOrders.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'EmployeeEntity'</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployeeCollectionViaOrders(bool forceFetch)
		{
			return GetMultiEmployeeCollectionViaOrders(forceFetch, _employeeCollectionViaOrders.EntityFactoryToUse);
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type 'm:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToMany() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection GetMultiEmployeeCollectionViaOrders(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			var filter = new PredicateExpression();
			filter.Add(new FieldCompareValuePredicate(ShipperFields.ShipperId, ComparisonOperator.Equal, this.ShipperId, "ShipperEntity__"));
			return PerformMultiEntityLazyLoading<SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection>("EmployeeCollectionViaOrders", forceFetch, entityFactoryToUse, (c,r)=>c.GetMulti(filter, r));
		}

		/// <summary>Sets the collection parameters for the collection for 'EmployeeCollectionViaOrders'. These settings will be taken into account
		/// when the property EmployeeCollectionViaOrders is requested or GetMultiEmployeeCollectionViaOrders is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersEmployeeCollectionViaOrders(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_employeeCollectionViaOrders.SortClauses=sortClauses;
			_employeeCollectionViaOrders.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="validator">The validator object for this ShipperEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Int32 shipperId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(shipperId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			_orders = new SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection();
			_orders.SetContainingEntityInfo(this, "Shipper");
			_customerCollectionViaOrders = new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection();
			_employeeCollectionViaOrders = new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection();
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.Int32 shipperId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)ShipperFieldIndex.ShipperId].ForcedCurrentValueWrite(shipperId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateShipperDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ShipperRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Order' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathOrders { get { return _staticMetaData.GetPrefetchPathElement("Orders", new SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Customer'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerCollectionViaOrders { get { return _staticMetaData.GetPrefetchPathElement("CustomerCollectionViaOrders", new SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Employee'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathEmployeeCollectionViaOrders { get { return _staticMetaData.GetPrefetchPathElement("EmployeeCollectionViaOrders", new SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection()); } }


		/// <summary>The CompanyName property of the Entity Shipper<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Shippers"."CompanyName"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CompanyName
		{
			get { return (System.String)GetValue((int)ShipperFieldIndex.CompanyName, true); }
			set	{ SetValue((int)ShipperFieldIndex.CompanyName, value, true); }
		}

		/// <summary>The Phone property of the Entity Shipper<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Shippers"."Phone"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Phone
		{
			get { return (System.String)GetValue((int)ShipperFieldIndex.Phone, true); }
			set	{ SetValue((int)ShipperFieldIndex.Phone, value, true); }
		}

		/// <summary>The ShipperId property of the Entity Shipper<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Shippers"."ShipperID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ShipperId
		{
			get { return (System.Int32)GetValue((int)ShipperFieldIndex.ShipperId, true); }
			set	{ SetValue((int)ShipperFieldIndex.ShipperId, value, true); }
		}

		/// <summary>Retrieves all related entities of type 'OrderEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.OrderCollection Orders { get { return GetMultiOrders(false); } }

		/// <summary>Gets / sets the lazy loading flag for Orders. When set to true, Orders is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Orders is accessed. You can always execute/ a forced fetch by calling GetMultiOrders(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchOrders
		{
			get	{ return GetAlwaysFetchValueForNavigator("Orders"); }
			set	{ SetAlwaysFetchValueForNavigator("Orders", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property Orders already has been fetched. Setting this property to false when Orders has been fetched
		/// will clear the Orders collection well. Setting this property to true while Orders hasn't been fetched disables lazy loading for Orders</summary>
		[Browsable(false)]
		public bool AlreadyFetchedOrders
		{
			get { return GetAlreadyFetchedValueForNavigator("Orders");}
			set { SetAlreadyFetchedValueForNavigator("Orders", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'CustomerEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.CustomerCollection CustomerCollectionViaOrders { get { return GetMultiCustomerCollectionViaOrders(false); } }

		/// <summary>Gets / sets the lazy loading flag for CustomerCollectionViaOrders. When set to true, CustomerCollectionViaOrders is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerCollectionViaOrders is accessed. You can always execute a forced fetch by calling GetMultiCustomerCollectionViaOrders(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerCollectionViaOrders
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerCollectionViaOrders"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerCollectionViaOrders", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerCollectionViaOrders already has been fetched. Setting this property to false when CustomerCollectionViaOrders has been fetched
		/// will clear the CustomerCollectionViaOrders collection well. Setting this property to true while CustomerCollectionViaOrders hasn't been fetched disables lazy loading for CustomerCollectionViaOrders</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerCollectionViaOrders
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerCollectionViaOrders");}
			set { SetAlreadyFetchedValueForNavigator("CustomerCollectionViaOrders", value, true);}
		}

		/// <summary>Retrieves all related entities of type 'EmployeeEntity' using a relation of type 'm:n'.<br/><br/></summary>
		public virtual SD.LLBLGen.Pro.Examples.CollectionClasses.EmployeeCollection EmployeeCollectionViaOrders { get { return GetMultiEmployeeCollectionViaOrders(false); } }

		/// <summary>Gets / sets the lazy loading flag for EmployeeCollectionViaOrders. When set to true, EmployeeCollectionViaOrders is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time EmployeeCollectionViaOrders is accessed. You can always execute a forced fetch by calling GetMultiEmployeeCollectionViaOrders(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchEmployeeCollectionViaOrders
		{
			get	{ return GetAlwaysFetchValueForNavigator("EmployeeCollectionViaOrders"); }
			set	{ SetAlwaysFetchValueForNavigator("EmployeeCollectionViaOrders", value); }
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property EmployeeCollectionViaOrders already has been fetched. Setting this property to false when EmployeeCollectionViaOrders has been fetched
		/// will clear the EmployeeCollectionViaOrders collection well. Setting this property to true while EmployeeCollectionViaOrders hasn't been fetched disables lazy loading for EmployeeCollectionViaOrders</summary>
		[Browsable(false)]
		public bool AlreadyFetchedEmployeeCollectionViaOrders
		{
			get { return GetAlreadyFetchedValueForNavigator("EmployeeCollectionViaOrders");}
			set { SetAlreadyFetchedValueForNavigator("EmployeeCollectionViaOrders", value, true);}
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples
{
	public enum ShipperFieldIndex
	{
		///<summary>CompanyName. </summary>
		CompanyName,
		///<summary>Phone. </summary>
		Phone,
		///<summary>ShipperId. </summary>
		ShipperId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Shipper. </summary>
	public partial class ShipperRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between ShipperEntity and OrderEntity over the 1:n relation they have, using the relation between the fields: Shipper.ShipperId - Order.ShipVia</summary>
		public virtual IEntityRelation OrderEntityUsingShipVia
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Orders", true, new[] { ShipperFields.ShipperId, OrderFields.ShipVia }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticShipperRelations
	{
		internal static readonly IEntityRelation OrderEntityUsingShipViaStatic = new ShipperRelations().OrderEntityUsingShipVia;

		/// <summary>CTor</summary>
		static StaticShipperRelations() { }
	}
}
