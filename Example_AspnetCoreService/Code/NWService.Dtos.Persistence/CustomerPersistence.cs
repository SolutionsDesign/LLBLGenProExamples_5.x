//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.9.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using NWService.Dal.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;

namespace NWService.Dtos.Persistence
{
	/// <summary>Static class for (extension) methods for fetching and projecting instances of NWService.Dtos.DtoClasses.Customer from / to the entity model.</summary>
	public static partial class CustomerPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.CustomerEntity, NWService.Dtos.DtoClasses.Customer>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<NWService.Dal.EntityClasses.CustomerEntity, NWService.Dtos.DtoClasses.Customer> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToCustomer(System.Linq.IQueryable{NWService.Dal.EntityClasses.CustomerEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToCustomer(ref System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.CustomerEntity, NWService.Dtos.DtoClasses.Customer>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToCustomer(EntityQuery{NWService.Dal.EntityClasses.CustomerEntity}, NWService.Dal.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToCustomer(EntityQuery{NWService.Dal.EntityClasses.CustomerEntity}, NWService.Dal.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToCustomerQs(ref System.Linq.Expressions.Expression<Func<NWService.Dtos.DtoClasses.Customer>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static CustomerPersistence() { }
	
		/// <summary>Extension method which produces a projection to NWService.Dtos.DtoClasses.Customer which instances are projected from the 
		/// results of the specified baseQuery, which returns NWService.Dal.EntityClasses.CustomerEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve NWService.Dtos.DtoClasses.Customer instances</returns>
		public static IQueryable<NWService.Dtos.DtoClasses.Customer> ProjectToCustomer(this IQueryable<NWService.Dal.EntityClasses.CustomerEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to NWService.Dtos.DtoClasses.Customer which instances are projected from the 
		/// results of the specified baseQuery using QuerySpec, which returns NWService.Dal.EntityClasses.CustomerEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve NWService.Dtos.DtoClasses.Customer instances</returns>
		public static DynamicQuery<NWService.Dtos.DtoClasses.Customer> ProjectToCustomer(this EntityQuery<NWService.Dal.EntityClasses.CustomerEntity> baseQuery, NWService.Dal.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<NWService.Dtos.DtoClasses.Customer>> projectionAdjustments = null;
			GetAdjustmentsForProjectToCustomerQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new NWService.Dtos.DtoClasses.Customer()
				{
					Address = CustomerFields.Address.Source("__BQ").ToValue<System.String>(),
					City = CustomerFields.City.Source("__BQ").ToValue<System.String>(),
					CompanyName = CustomerFields.CompanyName.Source("__BQ").ToValue<System.String>(),
					ContactName = CustomerFields.ContactName.Source("__BQ").ToValue<System.String>(),
					ContactTitle = CustomerFields.ContactTitle.Source("__BQ").ToValue<System.String>(),
					Country = CustomerFields.Country.Source("__BQ").ToValue<System.String>(),
					CustomerId = CustomerFields.CustomerId.Source("__BQ").ToValue<System.String>(),
					Fax = CustomerFields.Fax.Source("__BQ").ToValue<System.String>(),
					Phone = CustomerFields.Phone.Source("__BQ").ToValue<System.String>(),
					PostalCode = CustomerFields.PostalCode.Source("__BQ").ToValue<System.String>(),
					Region = CustomerFields.Region.Source("__BQ").ToValue<System.String>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_Customer 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to NWService.Dtos.DtoClasses.Customer which instances are projected from the
		/// NWService.Dal.EntityClasses.CustomerEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>NWService.Dal.EntityClasses.CustomerEntity instance created from the specified entity instance</returns>
		public static NWService.Dtos.DtoClasses.Customer ProjectToCustomer(this NWService.Dal.EntityClasses.CustomerEntity entity)
		{
			return _compiledProjector(entity);
		}
		
		private static System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.CustomerEntity, NWService.Dtos.DtoClasses.Customer>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.CustomerEntity, NWService.Dtos.DtoClasses.Customer>> mainProjection = p__0 => new NWService.Dtos.DtoClasses.Customer()
			{
				Address = p__0.Address,
				City = p__0.City,
				CompanyName = p__0.CompanyName,
				ContactName = p__0.ContactName,
				ContactTitle = p__0.ContactTitle,
				Country = p__0.Country,
				CustomerId = p__0.CustomerId,
				Fax = p__0.Fax,
				Phone = p__0.Phone,
				PostalCode = p__0.PostalCode,
				Region = p__0.Region,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_Customer 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.CustomerEntity, NWService.Dtos.DtoClasses.Customer>> projectionAdjustments = null;
			GetAdjustmentsForProjectToCustomer(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query which is executed on the database to fetch the original entity instance the specified <see cref="dto"/> object was projected from.</summary>
		/// <param name="dto">The dto object for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use expression</returns>
		public static System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.CustomerEntity, bool>> CreatePkPredicate(NWService.Dtos.DtoClasses.Customer dto)
		{
			return p__0 => p__0.CustomerId == dto.CustomerId;
		}

		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query which is executed on the database to fetch the original entity instances the specified set of <see cref="dtos"/> objects was projected from.</summary>
		/// <param name="dtos">The dto objects for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use expression</returns>
		public static System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.CustomerEntity, bool>> CreatePkPredicate(IEnumerable<NWService.Dtos.DtoClasses.Customer> dtos)
		{
			return p__0 => dtos.Select(p__1=>p__1.CustomerId).ToList().Contains(p__0.CustomerId);
		}

		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query on an IEnumerable in-memory set of entity instances to retrieve the original entity instance the specified <see cref="dto"/> object was projected from.</summary>
		/// <param name="dto">The dto object for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use func</returns>
		public static Func<NWService.Dal.EntityClasses.CustomerEntity, bool> CreateInMemoryPkPredicate(NWService.Dtos.DtoClasses.Customer dto)
		{
			return p__0 => p__0.CustomerId == dto.CustomerId;
		}
		
		/// <summary>Updates the specified NWService.Dal.EntityClasses.CustomerEntity entity with the values stored in the dto object specified</summary>
		/// <param name="toUpdate">the entity instance to update.</param>
		/// <param name="dto">The dto object containing the source values.</param>
		/// <remarks>The PK field of toUpdate is set only if it's not marked as readonly.</remarks>
		public static void UpdateFromCustomer(this NWService.Dal.EntityClasses.CustomerEntity toUpdate, NWService.Dtos.DtoClasses.Customer dto)
		{
			if((toUpdate == null) || (dto == null))
			{
				return;
			}
			toUpdate.Address = dto.Address;
			toUpdate.City = dto.City;
			toUpdate.CompanyName = dto.CompanyName;
			toUpdate.ContactName = dto.ContactName;
			toUpdate.ContactTitle = dto.ContactTitle;
			toUpdate.Country = dto.Country;
			toUpdate.CustomerId = dto.CustomerId;
			toUpdate.Fax = dto.Fax;
			toUpdate.Phone = dto.Phone;
			toUpdate.PostalCode = dto.PostalCode;
			toUpdate.Region = dto.Region;
		}
	}
}


 