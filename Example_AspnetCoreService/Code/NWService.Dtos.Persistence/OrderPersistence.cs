//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.9.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using NWService.Dal.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;

namespace NWService.Dtos.Persistence
{
	/// <summary>Static class for (extension) methods for fetching and projecting instances of NWService.Dtos.DtoClasses.Order from / to the entity model.</summary>
	public static partial class OrderPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.OrderEntity, NWService.Dtos.DtoClasses.Order>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<NWService.Dal.EntityClasses.OrderEntity, NWService.Dtos.DtoClasses.Order> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToOrder(System.Linq.IQueryable{NWService.Dal.EntityClasses.OrderEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToOrder(ref System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.OrderEntity, NWService.Dtos.DtoClasses.Order>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToOrder(EntityQuery{NWService.Dal.EntityClasses.OrderEntity}, NWService.Dal.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToOrder(EntityQuery{NWService.Dal.EntityClasses.OrderEntity}, NWService.Dal.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToOrderQs(ref System.Linq.Expressions.Expression<Func<NWService.Dtos.DtoClasses.Order>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static OrderPersistence() { }
	
		/// <summary>Extension method which produces a projection to NWService.Dtos.DtoClasses.Order which instances are projected from the 
		/// results of the specified baseQuery, which returns NWService.Dal.EntityClasses.OrderEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve NWService.Dtos.DtoClasses.Order instances</returns>
		public static IQueryable<NWService.Dtos.DtoClasses.Order> ProjectToOrder(this IQueryable<NWService.Dal.EntityClasses.OrderEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to NWService.Dtos.DtoClasses.Order which instances are projected from the 
		/// results of the specified baseQuery using QuerySpec, which returns NWService.Dal.EntityClasses.OrderEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve NWService.Dtos.DtoClasses.Order instances</returns>
		public static DynamicQuery<NWService.Dtos.DtoClasses.Order> ProjectToOrder(this EntityQuery<NWService.Dal.EntityClasses.OrderEntity> baseQuery, NWService.Dal.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<NWService.Dtos.DtoClasses.Order>> projectionAdjustments = null;
			GetAdjustmentsForProjectToOrderQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new NWService.Dtos.DtoClasses.Order()
				{
					CustomerId = OrderFields.CustomerId.Source("__BQ").ToValue<System.String>(),
					EmployeeId = OrderFields.EmployeeId.Source("__BQ").ToValue<Nullable<System.Int32>>(),
					Freight = OrderFields.Freight.Source("__BQ").ToValue<Nullable<System.Decimal>>(),
					OrderDate = OrderFields.OrderDate.Source("__BQ").ToValue<Nullable<System.DateTime>>(),
					OrderDetails = (List<NWService.Dtos.DtoClasses.OrderTypes.OrderDetail>)qf.OrderDetail.TargetAs("__L1_0")
						.CorrelatedOver(OrderFields.OrderId.Source("__BQ").Equal(OrderDetailFields.OrderId.Source("__L1_0")))
						.Select(() => new NWService.Dtos.DtoClasses.OrderTypes.OrderDetail()
						{
							Discount = OrderDetailFields.Discount.Source("__L1_0").ToValue<System.Single>(),
							ProductId = OrderDetailFields.ProductId.Source("__L1_0").ToValue<System.Int32>(),
							Quantity = OrderDetailFields.Quantity.Source("__L1_0").ToValue<System.Int16>(),
							UnitPrice = OrderDetailFields.UnitPrice.Source("__L1_0").ToValue<System.Decimal>(),
						}).ToResultset(),
					OrderId = OrderFields.OrderId.Source("__BQ").ToValue<System.Int32>(),
					RequiredDate = OrderFields.RequiredDate.Source("__BQ").ToValue<Nullable<System.DateTime>>(),
					ShipAddress = OrderFields.ShipAddress.Source("__BQ").ToValue<System.String>(),
					ShipCity = OrderFields.ShipCity.Source("__BQ").ToValue<System.String>(),
					ShipCountry = OrderFields.ShipCountry.Source("__BQ").ToValue<System.String>(),
					ShipName = OrderFields.ShipName.Source("__BQ").ToValue<System.String>(),
					ShippedDate = OrderFields.ShippedDate.Source("__BQ").ToValue<Nullable<System.DateTime>>(),
					ShipPostalCode = OrderFields.ShipPostalCode.Source("__BQ").ToValue<System.String>(),
					ShipRegion = OrderFields.ShipRegion.Source("__BQ").ToValue<System.String>(),
					ShipVia = OrderFields.ShipVia.Source("__BQ").ToValue<Nullable<System.Int32>>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_Order 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to NWService.Dtos.DtoClasses.Order which instances are projected from the
		/// NWService.Dal.EntityClasses.OrderEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>NWService.Dal.EntityClasses.OrderEntity instance created from the specified entity instance</returns>
		public static NWService.Dtos.DtoClasses.Order ProjectToOrder(this NWService.Dal.EntityClasses.OrderEntity entity)
		{
			return _compiledProjector(entity);
		}
		
		private static System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.OrderEntity, NWService.Dtos.DtoClasses.Order>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.OrderEntity, NWService.Dtos.DtoClasses.Order>> mainProjection = p__0 => new NWService.Dtos.DtoClasses.Order()
			{
				CustomerId = p__0.CustomerId,
				EmployeeId = p__0.EmployeeId,
				Freight = p__0.Freight,
				OrderDate = p__0.OrderDate,
				OrderDetails = p__0.OrderDetails.Select(p__1 => new NWService.Dtos.DtoClasses.OrderTypes.OrderDetail()
				{
					Discount = p__1.Discount,
					ProductId = p__1.ProductId,
					Quantity = p__1.Quantity,
					UnitPrice = p__1.UnitPrice,
				}).ToList(),
				OrderId = p__0.OrderId,
				RequiredDate = p__0.RequiredDate,
				ShipAddress = p__0.ShipAddress,
				ShipCity = p__0.ShipCity,
				ShipCountry = p__0.ShipCountry,
				ShipName = p__0.ShipName,
				ShippedDate = p__0.ShippedDate,
				ShipPostalCode = p__0.ShipPostalCode,
				ShipRegion = p__0.ShipRegion,
				ShipVia = p__0.ShipVia,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_Order 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.OrderEntity, NWService.Dtos.DtoClasses.Order>> projectionAdjustments = null;
			GetAdjustmentsForProjectToOrder(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query which is executed on the database to fetch the original entity instance the specified <see cref="dto"/> object was projected from.</summary>
		/// <param name="dto">The dto object for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use expression</returns>
		public static System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.OrderEntity, bool>> CreatePkPredicate(NWService.Dtos.DtoClasses.Order dto)
		{
			return p__0 => p__0.OrderId == dto.OrderId;
		}

		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query which is executed on the database to fetch the original entity instances the specified set of <see cref="dtos"/> objects was projected from.</summary>
		/// <param name="dtos">The dto objects for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use expression</returns>
		public static System.Linq.Expressions.Expression<Func<NWService.Dal.EntityClasses.OrderEntity, bool>> CreatePkPredicate(IEnumerable<NWService.Dtos.DtoClasses.Order> dtos)
		{
			return p__0 => dtos.Select(p__1=>p__1.OrderId).ToList().Contains(p__0.OrderId);
		}

		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query on an IEnumerable in-memory set of entity instances to retrieve the original entity instance the specified <see cref="dto"/> object was projected from.</summary>
		/// <param name="dto">The dto object for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use func</returns>
		public static Func<NWService.Dal.EntityClasses.OrderEntity, bool> CreateInMemoryPkPredicate(NWService.Dtos.DtoClasses.Order dto)
		{
			return p__0 => p__0.OrderId == dto.OrderId;
		}
		
		/// <summary>Updates the specified NWService.Dal.EntityClasses.OrderEntity entity with the values stored in the dto object specified</summary>
		/// <param name="toUpdate">the entity instance to update.</param>
		/// <param name="dto">The dto object containing the source values.</param>
		/// <remarks>The PK field of toUpdate is set only if it's not marked as readonly.</remarks>
		public static void UpdateFromOrder(this NWService.Dal.EntityClasses.OrderEntity toUpdate, NWService.Dtos.DtoClasses.Order dto)
		{
			if((toUpdate == null) || (dto == null))
			{
				return;
			}
			toUpdate.CustomerId = dto.CustomerId;
			toUpdate.EmployeeId = dto.EmployeeId;
			toUpdate.Freight = dto.Freight;
			toUpdate.OrderDate = dto.OrderDate;
			toUpdate.RequiredDate = dto.RequiredDate;
			toUpdate.ShipAddress = dto.ShipAddress;
			toUpdate.ShipCity = dto.ShipCity;
			toUpdate.ShipCountry = dto.ShipCountry;
			toUpdate.ShipName = dto.ShipName;
			toUpdate.ShippedDate = dto.ShippedDate;
			toUpdate.ShipPostalCode = dto.ShipPostalCode;
			toUpdate.ShipRegion = dto.ShipRegion;
			toUpdate.ShipVia = dto.ShipVia;
		}
	}
}


 