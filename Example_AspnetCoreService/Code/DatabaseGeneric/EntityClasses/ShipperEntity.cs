//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.8.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using NWService.Dal.HelperClasses;
using NWService.Dal.FactoryClasses;
using NWService.Dal.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace NWService.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Shipper'.<br/><br/></summary>
	[Serializable]
	public partial class ShipperEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<OrderEntity> _orders;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static ShipperEntityStaticMetaData _staticMetaData = new ShipperEntityStaticMetaData();
		private static ShipperRelations _relationsFactory = new ShipperRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Orders</summary>
			public static readonly string Orders = "Orders";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ShipperEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ShipperEntityStaticMetaData()
			{
				SetEntityCoreInfo("ShipperEntity", InheritanceHierarchyType.None, false, (int)NWService.Dal.EntityType.ShipperEntity, typeof(ShipperEntity), typeof(ShipperEntityFactory), false);
				AddNavigatorMetaData<ShipperEntity, EntityCollection<OrderEntity>>("Orders", a => a._orders, (a, b) => a._orders = b, a => a.Orders, () => new ShipperRelations().OrderEntityUsingShipVia, typeof(OrderEntity), (int)NWService.Dal.EntityType.OrderEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static ShipperEntity()
		{
		}

		/// <summary> CTor</summary>
		public ShipperEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public ShipperEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this ShipperEntity</param>
		public ShipperEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		public ShipperEntity(System.Int32 shipperId) : this(shipperId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="shipperId">PK value for Shipper which data should be fetched into this Shipper object</param>
		/// <param name="validator">The custom validator object for this ShipperEntity</param>
		public ShipperEntity(System.Int32 shipperId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ShipperId = shipperId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ShipperEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Order' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrders() { return CreateRelationInfoForNavigator("Orders"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this ShipperEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ShipperRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Order' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrders { get { return _staticMetaData.GetPrefetchPathElement("Orders", CommonEntityBase.CreateEntityCollection<OrderEntity>()); } }

		/// <summary>The CompanyName property of the Entity Shipper<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Shippers"."CompanyName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CompanyName
		{
			get { return (System.String)GetValue((int)ShipperFieldIndex.CompanyName, true); }
			set	{ SetValue((int)ShipperFieldIndex.CompanyName, value); }
		}

		/// <summary>The Phone property of the Entity Shipper<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Shippers"."Phone".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Phone
		{
			get { return (System.String)GetValue((int)ShipperFieldIndex.Phone, true); }
			set	{ SetValue((int)ShipperFieldIndex.Phone, value); }
		}

		/// <summary>The ShipperId property of the Entity Shipper<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Shippers"."ShipperID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ShipperId
		{
			get { return (System.Int32)GetValue((int)ShipperFieldIndex.ShipperId, true); }
			set { SetValue((int)ShipperFieldIndex.ShipperId, value); }		}

		/// <summary>Gets the EntityCollection with the related entities of type 'OrderEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(OrderEntity))]
		public virtual EntityCollection<OrderEntity> Orders { get { return GetOrCreateEntityCollection<OrderEntity, OrderEntityFactory>("Shipper", true, false, ref _orders); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace NWService.Dal
{
	public enum ShipperFieldIndex
	{
		///<summary>CompanyName. </summary>
		CompanyName,
		///<summary>Phone. </summary>
		Phone,
		///<summary>ShipperId. </summary>
		ShipperId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace NWService.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Shipper. </summary>
	public partial class ShipperRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between ShipperEntity and OrderEntity over the 1:n relation they have, using the relation between the fields: Shipper.ShipperId - Order.ShipVia</summary>
		public virtual IEntityRelation OrderEntityUsingShipVia
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Orders", true, new[] { ShipperFields.ShipperId, OrderFields.ShipVia }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticShipperRelations
	{
		internal static readonly IEntityRelation OrderEntityUsingShipViaStatic = new ShipperRelations().OrderEntityUsingShipVia;

		/// <summary>CTor</summary>
		static StaticShipperRelations() { }
	}
}
