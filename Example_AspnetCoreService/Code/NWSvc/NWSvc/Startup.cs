using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using SD.LLBLGen.Pro.DQE.SqlServer;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace NWSvc
{
	/// <summary>
	/// Startup class for the service. Generated by the IDE and customized for using with LLBLGen Pro.
	/// </summary>
	public class Startup
	{
		public Startup(IConfiguration configuration)
		{
			Configuration = configuration;
		}


		public IConfiguration Configuration { get; }


		// This method gets called by the runtime. Use this method to add services to the container.
		public void ConfigureServices(IServiceCollection services)
		{
			// Configure the LLBLGen Pro Runtime here with calls to RuntimeConfiguration
			RuntimeConfiguration.AddConnectionString("ConnectionString.SQL Server (SqlClient)", 
													 this.Configuration.GetConnectionString("ConnectionString.SQL Server (SqlClient)"));
			RuntimeConfiguration.ConfigureDQE<SQLServerDQEConfiguration>(c =>
																		 {
																			 // add more here...
																			 c.AddDbProviderFactory(typeof(Microsoft.Data.SqlClient.SqlClientFactory));
																		 });
		
			services.AddControllers();
			services.AddSwaggerGen(c => { c.SwaggerDoc("v1", new OpenApiInfo {Title = "NWSvc", Version = "v1"}); });
		}


		// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
		public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
		{
			if(env.IsDevelopment())
			{
				app.UseDeveloperExceptionPage();
				app.UseSwagger();
				app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "NWSvc v1"));
			}

			app.UseHttpsRedirection();
			app.UseRouting();
			app.UseAuthorization();
			app.UseEndpoints(endpoints => { endpoints.MapControllers(); });
		}
	}
}