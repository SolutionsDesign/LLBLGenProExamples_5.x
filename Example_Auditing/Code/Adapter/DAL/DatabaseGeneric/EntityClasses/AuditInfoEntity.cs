//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 15:54:55
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.Auditing.HelperClasses;
using SD.LLBLGen.Pro.Examples.Auditing.FactoryClasses;
using SD.LLBLGen.Pro.Examples.Auditing.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.Auditing.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'AuditInfo'.<br/><br/></summary>
	[Serializable]
	public partial class AuditInfoEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private AuditActionTypeEntity _auditActionType;
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AuditInfoEntityStaticMetaData _staticMetaData = new AuditInfoEntityStaticMetaData();
		private static AuditInfoRelations _relationsFactory = new AuditInfoRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name AuditActionType</summary>
			public static readonly string AuditActionType = "AuditActionType";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AuditInfoEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AuditInfoEntityStaticMetaData()
			{
				SetEntityCoreInfo("AuditInfoEntity", InheritanceHierarchyType.TargetPerEntity, false, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.AuditInfoEntity, typeof(AuditInfoEntity), typeof(AuditInfoEntityFactory), false);
				AddNavigatorMetaData<AuditInfoEntity, AuditActionTypeEntity>("AuditActionType", "AuditInfo", (a, b) => a._auditActionType = b, a => a._auditActionType, (a, b) => a.AuditActionType = b, SD.LLBLGen.Pro.Examples.Auditing.RelationClasses.StaticAuditInfoRelations.AuditActionTypeEntityUsingAuditActionTypeIdStatic, ()=>new AuditInfoRelations().AuditActionTypeEntityUsingAuditActionTypeId, null, new int[] { (int)AuditInfoFieldIndex.AuditActionTypeId }, null, true, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.AuditActionTypeEntity);
				AddNavigatorMetaData<AuditInfoEntity, UserEntity>("User", "AuditInfo", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, SD.LLBLGen.Pro.Examples.Auditing.RelationClasses.StaticAuditInfoRelations.UserEntityUsingUserIdStatic, ()=>new AuditInfoRelations().UserEntityUsingUserId, null, new int[] { (int)AuditInfoFieldIndex.UserId }, null, true, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AuditInfoEntity()
		{
		}

		/// <summary> CTor</summary>
		public AuditInfoEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AuditInfoEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AuditInfoEntity</param>
		public AuditInfoEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="auditInfoId">PK value for AuditInfo which data should be fetched into this AuditInfo object</param>
		public AuditInfoEntity(System.Int32 auditInfoId) : this(auditInfoId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="auditInfoId">PK value for AuditInfo which data should be fetched into this AuditInfo object</param>
		/// <param name="validator">The custom validator object for this AuditInfoEntity</param>
		public AuditInfoEntity(System.Int32 auditInfoId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.AuditInfoId = auditInfoId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AuditInfoEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public  static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("AuditInfoEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AuditActionType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAuditActionType() { return CreateRelationInfoForNavigator("AuditActionType"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AuditInfoEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AuditInfoRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AuditActionType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAuditActionType { get { return _staticMetaData.GetPrefetchPathElement("AuditActionType", CommonEntityBase.CreateEntityCollection<AuditActionTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The ActionData property of the Entity AuditInfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditInfo"."ActionData".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 250.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ActionData
		{
			get { return (System.String)GetValue((int)AuditInfoFieldIndex.ActionData, true); }
			set	{ SetValue((int)AuditInfoFieldIndex.ActionData, value); }
		}

		/// <summary>The ActionDateTime property of the Entity AuditInfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditInfo"."ActionDateTime".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ActionDateTime
		{
			get { return (System.DateTime)GetValue((int)AuditInfoFieldIndex.ActionDateTime, true); }
			set	{ SetValue((int)AuditInfoFieldIndex.ActionDateTime, value); }
		}

		/// <summary>The AffectedEntityName property of the Entity AuditInfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditInfo"."AffectedEntityName".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String AffectedEntityName
		{
			get { return (System.String)GetValue((int)AuditInfoFieldIndex.AffectedEntityName, true); }
			set	{ SetValue((int)AuditInfoFieldIndex.AffectedEntityName, value); }
		}

		/// <summary>The AuditActionTypeId property of the Entity AuditInfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditInfo"."AuditActionTypeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 AuditActionTypeId
		{
			get { return (System.Int32)GetValue((int)AuditInfoFieldIndex.AuditActionTypeId, true); }
			set	{ SetValue((int)AuditInfoFieldIndex.AuditActionTypeId, value); }
		}

		/// <summary>The AuditInfoId property of the Entity AuditInfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditInfo"."AuditInfoID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 AuditInfoId
		{
			get { return (System.Int32)GetValue((int)AuditInfoFieldIndex.AuditInfoId, true); }
			set { SetValue((int)AuditInfoFieldIndex.AuditInfoId, value); }		}

		/// <summary>The UserId property of the Entity AuditInfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditInfo"."UserID".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String UserId
		{
			get { return (System.String)GetValue((int)AuditInfoFieldIndex.UserId, true); }
			set	{ SetValue((int)AuditInfoFieldIndex.UserId, value); }
		}

		/// <summary>Gets / sets related entity of type 'AuditActionTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AuditActionTypeEntity AuditActionType
		{
			get { return _auditActionType; }
			set { SetSingleRelatedEntityNavigator(value, "AuditActionType"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing
{
	public enum AuditInfoFieldIndex
	{
		///<summary>ActionData. </summary>
		ActionData,
		///<summary>ActionDateTime. </summary>
		ActionDateTime,
		///<summary>AffectedEntityName. </summary>
		AffectedEntityName,
		///<summary>AuditActionTypeId. </summary>
		AuditActionTypeId,
		///<summary>AuditInfoId. </summary>
		AuditInfoId,
		///<summary>UserId. </summary>
		UserId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AuditInfo. </summary>
	public partial class AuditInfoRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between AuditInfoEntity and AuditActionTypeEntity over the m:1 relation they have, using the relation between the fields: AuditInfo.AuditActionTypeId - AuditActionType.AuditActionTypeId</summary>
		public virtual IEntityRelation AuditActionTypeEntityUsingAuditActionTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "AuditActionType", false, new[] { AuditActionTypeFields.AuditActionTypeId, AuditInfoFields.AuditActionTypeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditInfoEntity and UserEntity over the m:1 relation they have, using the relation between the fields: AuditInfo.UserId - User.UserId</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserId, AuditInfoFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditInfoEntity and OrderAuditInfoEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>		
		internal IEntityRelation RelationToSubTypeOrderAuditInfoEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(true, new[] { AuditInfoFields.AuditInfoId, OrderAuditInfoFields.AuditInfoId }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			switch(subTypeEntityName)
			{
				case "OrderAuditInfoEntity":
					return this.RelationToSubTypeOrderAuditInfoEntity;
				default:
					return null;
			}
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAuditInfoRelations
	{
		internal static readonly IEntityRelation AuditActionTypeEntityUsingAuditActionTypeIdStatic = new AuditInfoRelations().AuditActionTypeEntityUsingAuditActionTypeId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new AuditInfoRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticAuditInfoRelations() { }
	}
}
