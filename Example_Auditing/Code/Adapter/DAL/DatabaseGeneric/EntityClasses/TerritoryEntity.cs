//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 15:54:55
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.Auditing.HelperClasses;
using SD.LLBLGen.Pro.Examples.Auditing.FactoryClasses;
using SD.LLBLGen.Pro.Examples.Auditing.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.Auditing.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Territory'.<br/><br/></summary>
	[Serializable]
	public partial class TerritoryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<EmployeeTerritoryEntity> _employeeTerritories;
		private EntityCollection<EmployeeEntity> _employeesCollectionViaEmployeeTerritories;
		private RegionEntity _region;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static TerritoryEntityStaticMetaData _staticMetaData = new TerritoryEntityStaticMetaData();
		private static TerritoryRelations _relationsFactory = new TerritoryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Region</summary>
			public static readonly string Region = "Region";
			/// <summary>Member name EmployeeTerritories</summary>
			public static readonly string EmployeeTerritories = "EmployeeTerritories";
			/// <summary>Member name EmployeesCollectionViaEmployeeTerritories</summary>
			public static readonly string EmployeesCollectionViaEmployeeTerritories = "EmployeesCollectionViaEmployeeTerritories";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class TerritoryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public TerritoryEntityStaticMetaData()
			{
				SetEntityCoreInfo("TerritoryEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.TerritoryEntity, typeof(TerritoryEntity), typeof(TerritoryEntityFactory), false);
				AddNavigatorMetaData<TerritoryEntity, EntityCollection<EmployeeTerritoryEntity>>("EmployeeTerritories", a => a._employeeTerritories, (a, b) => a._employeeTerritories = b, a => a.EmployeeTerritories, () => new TerritoryRelations().EmployeeTerritoryEntityUsingTerritoryId, typeof(EmployeeTerritoryEntity), (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.EmployeeTerritoryEntity);
				AddNavigatorMetaData<TerritoryEntity, RegionEntity>("Region", "Territories", (a, b) => a._region = b, a => a._region, (a, b) => a.Region = b, SD.LLBLGen.Pro.Examples.Auditing.RelationClasses.StaticTerritoryRelations.RegionEntityUsingRegionIdStatic, ()=>new TerritoryRelations().RegionEntityUsingRegionId, null, new int[] { (int)TerritoryFieldIndex.RegionId }, null, true, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.RegionEntity);
				AddNavigatorMetaData<TerritoryEntity, EntityCollection<EmployeeEntity>>("EmployeesCollectionViaEmployeeTerritories", a => a._employeesCollectionViaEmployeeTerritories, (a, b) => a._employeesCollectionViaEmployeeTerritories = b, a => a.EmployeesCollectionViaEmployeeTerritories, () => new TerritoryRelations().EmployeeTerritoryEntityUsingTerritoryId, () => new EmployeeTerritoryRelations().EmployeeEntityUsingEmployeeId, "TerritoryEntity__", "EmployeeTerritory_", typeof(EmployeeEntity), (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.EmployeeEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static TerritoryEntity()
		{
		}

		/// <summary> CTor</summary>
		public TerritoryEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public TerritoryEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this TerritoryEntity</param>
		public TerritoryEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="territoryId">PK value for Territory which data should be fetched into this Territory object</param>
		public TerritoryEntity(System.String territoryId) : this(territoryId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="territoryId">PK value for Territory which data should be fetched into this Territory object</param>
		/// <param name="validator">The custom validator object for this TerritoryEntity</param>
		public TerritoryEntity(System.String territoryId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.TerritoryId = territoryId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected TerritoryEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EmployeeTerritory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployeeTerritories() { return CreateRelationInfoForNavigator("EmployeeTerritories"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Employee' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployeesCollectionViaEmployeeTerritories() { return CreateRelationInfoForNavigator("EmployeesCollectionViaEmployeeTerritories"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Region' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRegion() { return CreateRelationInfoForNavigator("Region"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this TerritoryEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static TerritoryRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EmployeeTerritory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployeeTerritories { get { return _staticMetaData.GetPrefetchPathElement("EmployeeTerritories", CommonEntityBase.CreateEntityCollection<EmployeeTerritoryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employee' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployeesCollectionViaEmployeeTerritories { get { return _staticMetaData.GetPrefetchPathElement("EmployeesCollectionViaEmployeeTerritories", CommonEntityBase.CreateEntityCollection<EmployeeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Region' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRegion { get { return _staticMetaData.GetPrefetchPathElement("Region", CommonEntityBase.CreateEntityCollection<RegionEntity>()); } }

		/// <summary>The RegionId property of the Entity Territory<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Territories"."RegionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 RegionId
		{
			get { return (System.Int32)GetValue((int)TerritoryFieldIndex.RegionId, true); }
			set	{ SetValue((int)TerritoryFieldIndex.RegionId, value); }
		}

		/// <summary>The TerritoryDescription property of the Entity Territory<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Territories"."TerritoryDescription".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String TerritoryDescription
		{
			get { return (System.String)GetValue((int)TerritoryFieldIndex.TerritoryDescription, true); }
			set	{ SetValue((int)TerritoryFieldIndex.TerritoryDescription, value); }
		}

		/// <summary>The TerritoryId property of the Entity Territory<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Territories"."TerritoryID".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 20.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String TerritoryId
		{
			get { return (System.String)GetValue((int)TerritoryFieldIndex.TerritoryId, true); }
			set	{ SetValue((int)TerritoryFieldIndex.TerritoryId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeeTerritoryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeeTerritoryEntity))]
		public virtual EntityCollection<EmployeeTerritoryEntity> EmployeeTerritories { get { return GetOrCreateEntityCollection<EmployeeTerritoryEntity, EmployeeTerritoryEntityFactory>("Territories", true, false, ref _employeeTerritories); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeeEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeeEntity))]
		public virtual EntityCollection<EmployeeEntity> EmployeesCollectionViaEmployeeTerritories { get { return GetOrCreateEntityCollection<EmployeeEntity, EmployeeEntityFactory>("TerritoriesCollectionViaEmployeeTerritories", false, true, ref _employeesCollectionViaEmployeeTerritories); } }

		/// <summary>Gets / sets related entity of type 'RegionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual RegionEntity Region
		{
			get { return _region; }
			set { SetSingleRelatedEntityNavigator(value, "Region"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing
{
	public enum TerritoryFieldIndex
	{
		///<summary>RegionId. </summary>
		RegionId,
		///<summary>TerritoryDescription. </summary>
		TerritoryDescription,
		///<summary>TerritoryId. </summary>
		TerritoryId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Territory. </summary>
	public partial class TerritoryRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between TerritoryEntity and EmployeeTerritoryEntity over the 1:n relation they have, using the relation between the fields: Territory.TerritoryId - EmployeeTerritory.TerritoryId</summary>
		public virtual IEntityRelation EmployeeTerritoryEntityUsingTerritoryId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeeTerritories", true, new[] { TerritoryFields.TerritoryId, EmployeeTerritoryFields.TerritoryId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between TerritoryEntity and RegionEntity over the m:1 relation they have, using the relation between the fields: Territory.RegionId - Region.RegionId</summary>
		public virtual IEntityRelation RegionEntityUsingRegionId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Region", false, new[] { RegionFields.RegionId, TerritoryFields.RegionId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticTerritoryRelations
	{
		internal static readonly IEntityRelation EmployeeTerritoryEntityUsingTerritoryIdStatic = new TerritoryRelations().EmployeeTerritoryEntityUsingTerritoryId;
		internal static readonly IEntityRelation RegionEntityUsingRegionIdStatic = new TerritoryRelations().RegionEntityUsingRegionId;

		/// <summary>CTor</summary>
		static StaticTerritoryRelations() { }
	}
}
