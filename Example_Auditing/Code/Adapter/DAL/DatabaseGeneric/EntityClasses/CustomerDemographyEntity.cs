//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 15:54:55
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.Auditing.HelperClasses;
using SD.LLBLGen.Pro.Examples.Auditing.FactoryClasses;
using SD.LLBLGen.Pro.Examples.Auditing.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.Auditing.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'CustomerDemography'.<br/><br/></summary>
	[Serializable]
	public partial class CustomerDemographyEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<CustomerCustomerDemoEntity> _customerCustomerDemo;
		private EntityCollection<CustomerEntity> _customersCollectionViaCustomerCustomerDemo;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CustomerDemographyEntityStaticMetaData _staticMetaData = new CustomerDemographyEntityStaticMetaData();
		private static CustomerDemographyRelations _relationsFactory = new CustomerDemographyRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CustomerCustomerDemo</summary>
			public static readonly string CustomerCustomerDemo = "CustomerCustomerDemo";
			/// <summary>Member name CustomersCollectionViaCustomerCustomerDemo</summary>
			public static readonly string CustomersCollectionViaCustomerCustomerDemo = "CustomersCollectionViaCustomerCustomerDemo";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomerDemographyEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomerDemographyEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomerDemographyEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.CustomerDemographyEntity, typeof(CustomerDemographyEntity), typeof(CustomerDemographyEntityFactory), false);
				AddNavigatorMetaData<CustomerDemographyEntity, EntityCollection<CustomerCustomerDemoEntity>>("CustomerCustomerDemo", a => a._customerCustomerDemo, (a, b) => a._customerCustomerDemo = b, a => a.CustomerCustomerDemo, () => new CustomerDemographyRelations().CustomerCustomerDemoEntityUsingCustomerTypeId, typeof(CustomerCustomerDemoEntity), (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.CustomerCustomerDemoEntity);
				AddNavigatorMetaData<CustomerDemographyEntity, EntityCollection<CustomerEntity>>("CustomersCollectionViaCustomerCustomerDemo", a => a._customersCollectionViaCustomerCustomerDemo, (a, b) => a._customersCollectionViaCustomerCustomerDemo = b, a => a.CustomersCollectionViaCustomerCustomerDemo, () => new CustomerDemographyRelations().CustomerCustomerDemoEntityUsingCustomerTypeId, () => new CustomerCustomerDemoRelations().CustomerEntityUsingCustomerId, "CustomerDemographyEntity__", "CustomerCustomerDemo_", typeof(CustomerEntity), (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.CustomerEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CustomerDemographyEntity()
		{
		}

		/// <summary> CTor</summary>
		public CustomerDemographyEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CustomerDemographyEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CustomerDemographyEntity</param>
		public CustomerDemographyEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		public CustomerDemographyEntity(System.String customerTypeId) : this(customerTypeId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemography which data should be fetched into this CustomerDemography object</param>
		/// <param name="validator">The custom validator object for this CustomerDemographyEntity</param>
		public CustomerDemographyEntity(System.String customerTypeId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.CustomerTypeId = customerTypeId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomerDemographyEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CustomerCustomerDemo' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerCustomerDemo() { return CreateRelationInfoForNavigator("CustomerCustomerDemo"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Customer' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomersCollectionViaCustomerCustomerDemo() { return CreateRelationInfoForNavigator("CustomersCollectionViaCustomerCustomerDemo"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CustomerDemographyEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomerDemographyRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerCustomerDemo' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerCustomerDemo { get { return _staticMetaData.GetPrefetchPathElement("CustomerCustomerDemo", CommonEntityBase.CreateEntityCollection<CustomerCustomerDemoEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Customer' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomersCollectionViaCustomerCustomerDemo { get { return _staticMetaData.GetPrefetchPathElement("CustomersCollectionViaCustomerCustomerDemo", CommonEntityBase.CreateEntityCollection<CustomerEntity>()); } }

		/// <summary>The CustomerDesc property of the Entity CustomerDemography<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerDemographics"."CustomerDesc".<br/>Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CustomerDesc
		{
			get { return (System.String)GetValue((int)CustomerDemographyFieldIndex.CustomerDesc, true); }
			set	{ SetValue((int)CustomerDemographyFieldIndex.CustomerDesc, value); }
		}

		/// <summary>The CustomerTypeId property of the Entity CustomerDemography<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerDemographics"."CustomerTypeID".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerTypeId
		{
			get { return (System.String)GetValue((int)CustomerDemographyFieldIndex.CustomerTypeId, true); }
			set	{ SetValue((int)CustomerDemographyFieldIndex.CustomerTypeId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'CustomerCustomerDemoEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CustomerCustomerDemoEntity))]
		public virtual EntityCollection<CustomerCustomerDemoEntity> CustomerCustomerDemo { get { return GetOrCreateEntityCollection<CustomerCustomerDemoEntity, CustomerCustomerDemoEntityFactory>("CustomerDemographics", true, false, ref _customerCustomerDemo); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CustomerEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CustomerEntity))]
		public virtual EntityCollection<CustomerEntity> CustomersCollectionViaCustomerCustomerDemo { get { return GetOrCreateEntityCollection<CustomerEntity, CustomerEntityFactory>("CustomerDemographicsCollectionViaCustomerCustomerDemo", false, true, ref _customersCollectionViaCustomerCustomerDemo); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing
{
	public enum CustomerDemographyFieldIndex
	{
		///<summary>CustomerDesc. </summary>
		CustomerDesc,
		///<summary>CustomerTypeId. </summary>
		CustomerTypeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CustomerDemography. </summary>
	public partial class CustomerDemographyRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CustomerDemographyEntity and CustomerCustomerDemoEntity over the 1:n relation they have, using the relation between the fields: CustomerDemography.CustomerTypeId - CustomerCustomerDemo.CustomerTypeId</summary>
		public virtual IEntityRelation CustomerCustomerDemoEntityUsingCustomerTypeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomerCustomerDemo", true, new[] { CustomerDemographyFields.CustomerTypeId, CustomerCustomerDemoFields.CustomerTypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomerDemographyRelations
	{
		internal static readonly IEntityRelation CustomerCustomerDemoEntityUsingCustomerTypeIdStatic = new CustomerDemographyRelations().CustomerCustomerDemoEntityUsingCustomerTypeId;

		/// <summary>CTor</summary>
		static StaticCustomerDemographyRelations() { }
	}
}
