//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: Tuesday, 1 February 2022 16:05:06
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.LLBLGen.Pro.Examples.Auditing.FactoryClasses;
using SD.LLBLGen.Pro.Examples.Auditing.DaoClasses;
using SD.LLBLGen.Pro.Examples.Auditing.RelationClasses;
using SD.LLBLGen.Pro.Examples.Auditing.HelperClasses;
using SD.LLBLGen.Pro.Examples.Auditing.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.LLBLGen.Pro.Examples.Auditing.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'CustomerCustomerDemo'. <br/><br/></summary>
	[Serializable]
	public partial class CustomerCustomerDemoEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private CustomerEntity _customers;
		private bool	_customersReturnsNewIfNotFound;
		private CustomerDemographyEntity _customerDemographics;
		private bool	_customerDemographicsReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CustomerCustomerDemoEntityStaticMetaData _staticMetaData = new CustomerCustomerDemoEntityStaticMetaData();
		private static CustomerCustomerDemoRelations _relationsFactory = new CustomerCustomerDemoRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Customers</summary>
			public static readonly string Customers = "Customers";
			/// <summary>Member name CustomerDemographics</summary>
			public static readonly string CustomerDemographics = "CustomerDemographics";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomerCustomerDemoEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomerCustomerDemoEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomerCustomerDemoEntity", InheritanceHierarchyType.None, false, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.CustomerCustomerDemoEntity, typeof(CustomerCustomerDemoEntity), typeof(CustomerCustomerDemoEntityFactory), false);
				AddNavigatorMetaData<CustomerCustomerDemoEntity, CustomerEntity>("Customers", "CustomerCustomerDemo", (a, b) => a._customers = b, a => a._customers, (a, b) => a.Customers = b, SD.LLBLGen.Pro.Examples.Auditing.RelationClasses.StaticCustomerCustomerDemoRelations.CustomerEntityUsingCustomerIdStatic, ()=>new CustomerCustomerDemoRelations().CustomerEntityUsingCustomerId, null, new int[] { (int)CustomerCustomerDemoFieldIndex.CustomerId }, null, true, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.CustomerEntity);
				AddNavigatorMetaData<CustomerCustomerDemoEntity, CustomerDemographyEntity>("CustomerDemographics", "CustomerCustomerDemo", (a, b) => a._customerDemographics = b, a => a._customerDemographics, (a, b) => a.CustomerDemographics = b, SD.LLBLGen.Pro.Examples.Auditing.RelationClasses.StaticCustomerCustomerDemoRelations.CustomerDemographyEntityUsingCustomerTypeIdStatic, ()=>new CustomerCustomerDemoRelations().CustomerDemographyEntityUsingCustomerTypeId, null, new int[] { (int)CustomerCustomerDemoFieldIndex.CustomerTypeId }, null, true, (int)SD.LLBLGen.Pro.Examples.Auditing.EntityType.CustomerDemographyEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static CustomerCustomerDemoEntity()
		{
		}

		/// <summary>CTor</summary>
		public CustomerCustomerDemoEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		public CustomerCustomerDemoEntity(System.String customerId, System.String customerTypeId)
		{
			InitClassFetch(customerId, customerTypeId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public CustomerCustomerDemoEntity(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(customerId, customerTypeId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="validator">The custom validator object for this CustomerCustomerDemoEntity</param>
		public CustomerCustomerDemoEntity(System.String customerId, System.String customerTypeId, IValidator validator)
		{
			InitClassFetch(customerId, customerTypeId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomerCustomerDemoEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId)
		{
			return FetchUsingPK(customerId, customerTypeId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(customerId, customerTypeId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(customerId, customerTypeId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(customerId, customerTypeId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.CustomerId, this.CustomerTypeId, null, null, null);
		}

		/// <summary>Retrieves the related entity of type 'CustomerEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'CustomerEntity' which is related to this entity.</returns>
		public virtual CustomerEntity GetSingleCustomers(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<CustomerEntity>("Customers", forceFetch, _customersReturnsNewIfNotFound, e=>e.FetchUsingPK(this.CustomerId));
		}

		/// <summary>Retrieves the related entity of type 'CustomerDemographyEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'CustomerDemographyEntity' which is related to this entity.</returns>
		public virtual CustomerDemographyEntity GetSingleCustomerDemographics(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<CustomerDemographyEntity>("CustomerDemographics", forceFetch, _customerDemographicsReturnsNewIfNotFound, e=>e.FetchUsingPK(this.CustomerTypeId));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="validator">The validator object for this CustomerCustomerDemoEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.String customerId, System.String customerTypeId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(customerId, customerTypeId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{			_customersReturnsNewIfNotFound = true;
			_customerDemographicsReturnsNewIfNotFound = true;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)CustomerCustomerDemoFieldIndex.CustomerId].ForcedCurrentValueWrite(customerId);
				this.Fields[(int)CustomerCustomerDemoFieldIndex.CustomerTypeId].ForcedCurrentValueWrite(customerTypeId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateCustomerCustomerDemoDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomerCustomerDemoRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Customer'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomers { get { return _staticMetaData.GetPrefetchPathElement("Customers", new SD.LLBLGen.Pro.Examples.Auditing.CollectionClasses.CustomerCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'CustomerDemography'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerDemographics { get { return _staticMetaData.GetPrefetchPathElement("CustomerDemographics", new SD.LLBLGen.Pro.Examples.Auditing.CollectionClasses.CustomerDemographyCollection()); } }


		/// <summary>The CustomerId property of the Entity CustomerCustomerDemo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerCustomerDemo"."CustomerID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 5<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerId
		{
			get { return (System.String)GetValue((int)CustomerCustomerDemoFieldIndex.CustomerId, true); }
			set	{ SetValue((int)CustomerCustomerDemoFieldIndex.CustomerId, value, true); }
		}

		/// <summary>The CustomerTypeId property of the Entity CustomerCustomerDemo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerCustomerDemo"."CustomerTypeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerTypeId
		{
			get { return (System.String)GetValue((int)CustomerCustomerDemoFieldIndex.CustomerTypeId, true); }
			set	{ SetValue((int)CustomerCustomerDemoFieldIndex.CustomerTypeId, value, true); }
		}


		/// <summary>Gets / sets related entity of type 'CustomerEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(true)]
		public virtual CustomerEntity Customers
		{
			get	{ return GetSingleCustomers(false); }
			set { SetSingleRelatedEntityNavigator(value, "Customers"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Customers. When set to true, Customers is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Customers is accessed. You can always execute a forced fetch by calling GetSingleCustomers(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomers
		{
			get	{ return GetAlwaysFetchValueForNavigator("Customers"); }
			set	{ SetAlwaysFetchValueForNavigator("Customers", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Customers already has been fetched. Setting this property to false when Customers has been fetched
		/// will set Customers to null as well. Setting this property to true while Customers hasn't been fetched disables lazy loading for Customers</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomers
		{
			get { return GetAlreadyFetchedValueForNavigator("Customers");}
			set { SetAlreadyFetchedValueForNavigator("Customers", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Customers is not found
		/// in the database. When set to true, Customers will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: true.</summary>
		[Browsable(false)]
		public bool CustomersReturnsNewIfNotFound
		{
			get	{ return _customersReturnsNewIfNotFound; }
			set { _customersReturnsNewIfNotFound = value; }	
		}

		/// <summary>Gets / sets related entity of type 'CustomerDemographyEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(true)]
		public virtual CustomerDemographyEntity CustomerDemographics
		{
			get	{ return GetSingleCustomerDemographics(false); }
			set { SetSingleRelatedEntityNavigator(value, "CustomerDemographics"); }
		}

		/// <summary>Gets / sets the lazy loading flag for CustomerDemographics. When set to true, CustomerDemographics is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerDemographics is accessed. You can always execute a forced fetch by calling GetSingleCustomerDemographics(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerDemographics
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerDemographics"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerDemographics", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerDemographics already has been fetched. Setting this property to false when CustomerDemographics has been fetched
		/// will set CustomerDemographics to null as well. Setting this property to true while CustomerDemographics hasn't been fetched disables lazy loading for CustomerDemographics</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerDemographics
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerDemographics");}
			set { SetAlreadyFetchedValueForNavigator("CustomerDemographics", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property CustomerDemographics is not found
		/// in the database. When set to true, CustomerDemographics will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: true.</summary>
		[Browsable(false)]
		public bool CustomerDemographicsReturnsNewIfNotFound
		{
			get	{ return _customerDemographicsReturnsNewIfNotFound; }
			set { _customerDemographicsReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing
{
	public enum CustomerCustomerDemoFieldIndex
	{
		///<summary>CustomerId. </summary>
		CustomerId,
		///<summary>CustomerTypeId. </summary>
		CustomerTypeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.LLBLGen.Pro.Examples.Auditing.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CustomerCustomerDemo. </summary>
	public partial class CustomerCustomerDemoRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CustomerCustomerDemoEntity and CustomerEntity over the m:1 relation they have, using the relation between the fields: CustomerCustomerDemo.CustomerId - Customer.CustomerId</summary>
		public virtual IEntityRelation CustomerEntityUsingCustomerId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Customers", false, new[] { CustomerFields.CustomerId, CustomerCustomerDemoFields.CustomerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CustomerCustomerDemoEntity and CustomerDemographyEntity over the m:1 relation they have, using the relation between the fields: CustomerCustomerDemo.CustomerTypeId - CustomerDemography.CustomerTypeId</summary>
		public virtual IEntityRelation CustomerDemographyEntityUsingCustomerTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CustomerDemographics", false, new[] { CustomerDemographyFields.CustomerTypeId, CustomerCustomerDemoFields.CustomerTypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomerCustomerDemoRelations
	{
		internal static readonly IEntityRelation CustomerEntityUsingCustomerIdStatic = new CustomerCustomerDemoRelations().CustomerEntityUsingCustomerId;
		internal static readonly IEntityRelation CustomerDemographyEntityUsingCustomerTypeIdStatic = new CustomerCustomerDemoRelations().CustomerDemographyEntityUsingCustomerTypeId;

		/// <summary>CTor</summary>
		static StaticCustomerCustomerDemoRelations() { }
	}
}
