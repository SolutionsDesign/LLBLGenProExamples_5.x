//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Northwind.DAL.HelperClasses;
using Northwind.DAL.FactoryClasses;
using Northwind.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Northwind.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Supplier'.<br/><br/></summary>
	[Serializable]
	public partial class SupplierEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ProductEntity> _products;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static SupplierEntityStaticMetaData _staticMetaData = new SupplierEntityStaticMetaData();
		private static SupplierRelations _relationsFactory = new SupplierRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Products</summary>
			public static readonly string Products = "Products";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SupplierEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public SupplierEntityStaticMetaData()
			{
				SetEntityCoreInfo("SupplierEntity", InheritanceHierarchyType.None, false, (int)Northwind.DAL.EntityType.SupplierEntity, typeof(SupplierEntity), typeof(SupplierEntityFactory), false);
				AddNavigatorMetaData<SupplierEntity, EntityCollection<ProductEntity>>("Products", a => a._products, (a, b) => a._products = b, a => a.Products, () => new SupplierRelations().ProductEntityUsingSupplierId, typeof(ProductEntity), (int)Northwind.DAL.EntityType.ProductEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SupplierEntity()
		{
		}

		/// <summary> CTor</summary>
		public SupplierEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SupplierEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SupplierEntity</param>
		public SupplierEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="supplierId">PK value for Supplier which data should be fetched into this Supplier object</param>
		public SupplierEntity(System.Int32 supplierId) : this(supplierId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="supplierId">PK value for Supplier which data should be fetched into this Supplier object</param>
		/// <param name="validator">The custom validator object for this SupplierEntity</param>
		public SupplierEntity(System.Int32 supplierId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.SupplierId = supplierId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SupplierEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProducts() { return CreateRelationInfoForNavigator("Products"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this SupplierEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static SupplierRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProducts { get { return _staticMetaData.GetPrefetchPathElement("Products", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>The Address property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."Address".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Address
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.Address, true); }
			set	{ SetValue((int)SupplierFieldIndex.Address, value); }
		}

		/// <summary>The City property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."City".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String City
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.City, true); }
			set	{ SetValue((int)SupplierFieldIndex.City, value); }
		}

		/// <summary>The CompanyName property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."CompanyName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CompanyName
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.CompanyName, true); }
			set	{ SetValue((int)SupplierFieldIndex.CompanyName, value); }
		}

		/// <summary>The ContactName property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."ContactName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactName
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.ContactName, true); }
			set	{ SetValue((int)SupplierFieldIndex.ContactName, value); }
		}

		/// <summary>The ContactTitle property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."ContactTitle".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ContactTitle
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.ContactTitle, true); }
			set	{ SetValue((int)SupplierFieldIndex.ContactTitle, value); }
		}

		/// <summary>The Country property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."Country".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Country
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.Country, true); }
			set	{ SetValue((int)SupplierFieldIndex.Country, value); }
		}

		/// <summary>The Fax property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."Fax".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Fax
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.Fax, true); }
			set	{ SetValue((int)SupplierFieldIndex.Fax, value); }
		}

		/// <summary>The HomePage property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."HomePage".<br/>Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String HomePage
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.HomePage, true); }
			set	{ SetValue((int)SupplierFieldIndex.HomePage, value); }
		}

		/// <summary>The Phone property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."Phone".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 24.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Phone
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.Phone, true); }
			set	{ SetValue((int)SupplierFieldIndex.Phone, value); }
		}

		/// <summary>The PostalCode property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."PostalCode".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PostalCode
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.PostalCode, true); }
			set	{ SetValue((int)SupplierFieldIndex.PostalCode, value); }
		}

		/// <summary>The Region property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."Region".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Region
		{
			get { return (System.String)GetValue((int)SupplierFieldIndex.Region, true); }
			set	{ SetValue((int)SupplierFieldIndex.Region, value); }
		}

		/// <summary>The SupplierId property of the Entity Supplier<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Suppliers"."SupplierID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 SupplierId
		{
			get { return (System.Int32)GetValue((int)SupplierFieldIndex.SupplierId, true); }
			set { SetValue((int)SupplierFieldIndex.SupplierId, value); }		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductEntity))]
		public virtual EntityCollection<ProductEntity> Products { get { return GetOrCreateEntityCollection<ProductEntity, ProductEntityFactory>("Supplier", true, false, ref _products); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Northwind.DAL
{
	public enum SupplierFieldIndex
	{
		///<summary>Address. </summary>
		Address,
		///<summary>City. </summary>
		City,
		///<summary>CompanyName. </summary>
		CompanyName,
		///<summary>ContactName. </summary>
		ContactName,
		///<summary>ContactTitle. </summary>
		ContactTitle,
		///<summary>Country. </summary>
		Country,
		///<summary>Fax. </summary>
		Fax,
		///<summary>HomePage. </summary>
		HomePage,
		///<summary>Phone. </summary>
		Phone,
		///<summary>PostalCode. </summary>
		PostalCode,
		///<summary>Region. </summary>
		Region,
		///<summary>SupplierId. </summary>
		SupplierId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Northwind.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Supplier. </summary>
	public partial class SupplierRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between SupplierEntity and ProductEntity over the 1:n relation they have, using the relation between the fields: Supplier.SupplierId - Product.SupplierId</summary>
		public virtual IEntityRelation ProductEntityUsingSupplierId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Products", true, new[] { SupplierFields.SupplierId, ProductFields.SupplierId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSupplierRelations
	{
		internal static readonly IEntityRelation ProductEntityUsingSupplierIdStatic = new SupplierRelations().ProductEntityUsingSupplierId;

		/// <summary>CTor</summary>
		static StaticSupplierRelations() { }
	}
}
