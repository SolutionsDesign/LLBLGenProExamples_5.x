//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Northwind.SSDAL.FactoryClasses;
using Northwind.SSDAL.DaoClasses;
using Northwind.SSDAL.RelationClasses;
using Northwind.SSDAL.HelperClasses;
using Northwind.SSDAL.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Northwind.SSDAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'UserGroup'. <br/><br/></summary>
	[Serializable]
	public partial class UserGroupEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private GroupEntity _group;
		private bool	_groupReturnsNewIfNotFound;
		private UserEntity _user;
		private bool	_userReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static UserGroupEntityStaticMetaData _staticMetaData = new UserGroupEntityStaticMetaData();
		private static UserGroupRelations _relationsFactory = new UserGroupRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Group</summary>
			public static readonly string Group = "Group";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserGroupEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserGroupEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserGroupEntity", InheritanceHierarchyType.None, false, (int)Northwind.SSDAL.EntityType.UserGroupEntity, typeof(UserGroupEntity), typeof(UserGroupEntityFactory), false);
				AddNavigatorMetaData<UserGroupEntity, GroupEntity>("Group", "UserGroups", (a, b) => a._group = b, a => a._group, (a, b) => a.Group = b, Northwind.SSDAL.RelationClasses.StaticUserGroupRelations.GroupEntityUsingGroupIdStatic, ()=>new UserGroupRelations().GroupEntityUsingGroupId, null, new int[] { (int)UserGroupFieldIndex.GroupId }, null, true, (int)Northwind.SSDAL.EntityType.GroupEntity);
				AddNavigatorMetaData<UserGroupEntity, UserEntity>("User", "UserGroups", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, Northwind.SSDAL.RelationClasses.StaticUserGroupRelations.UserEntityUsingUserIdStatic, ()=>new UserGroupRelations().UserEntityUsingUserId, null, new int[] { (int)UserGroupFieldIndex.UserId }, null, true, (int)Northwind.SSDAL.EntityType.UserEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static UserGroupEntity()
		{
		}

		/// <summary>CTor</summary>
		public UserGroupEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		public UserGroupEntity(System.Int32 groupId, System.String userId)
		{
			InitClassFetch(groupId, userId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public UserGroupEntity(System.Int32 groupId, System.String userId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(groupId, userId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="validator">The custom validator object for this UserGroupEntity</param>
		public UserGroupEntity(System.Int32 groupId, System.String userId, IValidator validator)
		{
			InitClassFetch(groupId, userId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserGroupEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 groupId, System.String userId)
		{
			return FetchUsingPK(groupId, userId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 groupId, System.String userId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(groupId, userId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 groupId, System.String userId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(groupId, userId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 groupId, System.String userId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(groupId, userId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.GroupId, this.UserId, null, null, null);
		}

		/// <summary>Retrieves the related entity of type 'GroupEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'GroupEntity' which is related to this entity.</returns>
		public virtual GroupEntity GetSingleGroup(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<GroupEntity>("Group", forceFetch, _groupReturnsNewIfNotFound, e=>e.FetchUsingPK(this.GroupId));
		}

		/// <summary>Retrieves the related entity of type 'UserEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'UserEntity' which is related to this entity.</returns>
		public virtual UserEntity GetSingleUser(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<UserEntity>("User", forceFetch, _userReturnsNewIfNotFound, e=>e.FetchUsingPK(this.UserId));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="validator">The validator object for this UserGroupEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Int32 groupId, System.String userId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(groupId, userId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{			_groupReturnsNewIfNotFound = false;
			_userReturnsNewIfNotFound = false;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="groupId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="userId">PK value for UserGroup which data should be fetched into this UserGroup object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.Int32 groupId, System.String userId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)UserGroupFieldIndex.GroupId].ForcedCurrentValueWrite(groupId);
				this.Fields[(int)UserGroupFieldIndex.UserId].ForcedCurrentValueWrite(userId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateUserGroupDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserGroupRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Group'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathGroup { get { return _staticMetaData.GetPrefetchPathElement("Group", new Northwind.SSDAL.CollectionClasses.GroupCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'User'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", new Northwind.SSDAL.CollectionClasses.UserCollection()); } }


		/// <summary>The GroupId property of the Entity UserGroup<br/><br/></summary>
		/// <remarks>Mapped on  table field: "UserGroup"."GroupId"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 GroupId
		{
			get { return (System.Int32)GetValue((int)UserGroupFieldIndex.GroupId, true); }
			set	{ SetValue((int)UserGroupFieldIndex.GroupId, value, true); }
		}

		/// <summary>The UserId property of the Entity UserGroup<br/><br/></summary>
		/// <remarks>Mapped on  table field: "UserGroup"."UserId"<br/>
		/// Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String UserId
		{
			get { return (System.String)GetValue((int)UserGroupFieldIndex.UserId, true); }
			set	{ SetValue((int)UserGroupFieldIndex.UserId, value, true); }
		}


		/// <summary>Gets / sets related entity of type 'GroupEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual GroupEntity Group
		{
			get	{ return GetSingleGroup(false); }
			set { SetSingleRelatedEntityNavigator(value, "Group"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Group. When set to true, Group is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Group is accessed. You can always execute a forced fetch by calling GetSingleGroup(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchGroup
		{
			get	{ return GetAlwaysFetchValueForNavigator("Group"); }
			set	{ SetAlwaysFetchValueForNavigator("Group", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Group already has been fetched. Setting this property to false when Group has been fetched
		/// will set Group to null as well. Setting this property to true while Group hasn't been fetched disables lazy loading for Group</summary>
		[Browsable(false)]
		public bool AlreadyFetchedGroup
		{
			get { return GetAlreadyFetchedValueForNavigator("Group");}
			set { SetAlreadyFetchedValueForNavigator("Group", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Group is not found
		/// in the database. When set to true, Group will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool GroupReturnsNewIfNotFound
		{
			get	{ return _groupReturnsNewIfNotFound; }
			set { _groupReturnsNewIfNotFound = value; }	
		}

		/// <summary>Gets / sets related entity of type 'UserEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get	{ return GetSingleUser(false); }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		/// <summary>Gets / sets the lazy loading flag for User. When set to true, User is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time User is accessed. You can always execute a forced fetch by calling GetSingleUser(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchUser
		{
			get	{ return GetAlwaysFetchValueForNavigator("User"); }
			set	{ SetAlwaysFetchValueForNavigator("User", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property User already has been fetched. Setting this property to false when User has been fetched
		/// will set User to null as well. Setting this property to true while User hasn't been fetched disables lazy loading for User</summary>
		[Browsable(false)]
		public bool AlreadyFetchedUser
		{
			get { return GetAlreadyFetchedValueForNavigator("User");}
			set { SetAlreadyFetchedValueForNavigator("User", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property User is not found
		/// in the database. When set to true, User will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool UserReturnsNewIfNotFound
		{
			get	{ return _userReturnsNewIfNotFound; }
			set { _userReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Northwind.SSDAL
{
	public enum UserGroupFieldIndex
	{
		///<summary>GroupId. </summary>
		GroupId,
		///<summary>UserId. </summary>
		UserId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Northwind.SSDAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: UserGroup. </summary>
	public partial class UserGroupRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between UserGroupEntity and GroupEntity over the m:1 relation they have, using the relation between the fields: UserGroup.GroupId - Group.Id</summary>
		public virtual IEntityRelation GroupEntityUsingGroupId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Group", false, new[] { GroupFields.Id, UserGroupFields.GroupId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserGroupEntity and UserEntity over the m:1 relation they have, using the relation between the fields: UserGroup.UserId - User.UserId</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserId, UserGroupFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserGroupRelations
	{
		internal static readonly IEntityRelation GroupEntityUsingGroupIdStatic = new UserGroupRelations().GroupEntityUsingGroupId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new UserGroupRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticUserGroupRelations() { }
	}
}
