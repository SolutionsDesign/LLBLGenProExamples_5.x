//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Northwind.SSDAL.FactoryClasses;
using Northwind.SSDAL.DaoClasses;
using Northwind.SSDAL.RelationClasses;
using Northwind.SSDAL.HelperClasses;
using Northwind.SSDAL.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Northwind.SSDAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'CustomerDemographic'. <br/><br/></summary>
	[Serializable]
	public partial class CustomerDemographicEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection	_customerCustomerDemos;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CustomerDemographicEntityStaticMetaData _staticMetaData = new CustomerDemographicEntityStaticMetaData();
		private static CustomerDemographicRelations _relationsFactory = new CustomerDemographicRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CustomerCustomerDemos</summary>
			public static readonly string CustomerCustomerDemos = "CustomerCustomerDemos";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomerDemographicEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomerDemographicEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomerDemographicEntity", InheritanceHierarchyType.None, false, (int)Northwind.SSDAL.EntityType.CustomerDemographicEntity, typeof(CustomerDemographicEntity), typeof(CustomerDemographicEntityFactory), false);
				AddNavigatorMetaData<CustomerDemographicEntity, Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection>("CustomerCustomerDemos", a => a._customerCustomerDemos, (a, b) => a._customerCustomerDemos = b, a => a.CustomerCustomerDemos, () => new CustomerDemographicRelations().CustomerCustomerDemoEntityUsingCustomerTypeId, typeof(CustomerCustomerDemoEntity), (int)Northwind.SSDAL.EntityType.CustomerCustomerDemoEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static CustomerDemographicEntity()
		{
		}

		/// <summary>CTor</summary>
		public CustomerDemographicEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		public CustomerDemographicEntity(System.String customerTypeId)
		{
			InitClassFetch(customerTypeId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public CustomerDemographicEntity(System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(customerTypeId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <param name="validator">The custom validator object for this CustomerDemographicEntity</param>
		public CustomerDemographicEntity(System.String customerTypeId, IValidator validator)
		{
			InitClassFetch(customerTypeId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomerDemographicEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId)
		{
			return FetchUsingPK(customerTypeId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(customerTypeId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(customerTypeId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(customerTypeId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.CustomerTypeId, null, null, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'CustomerCustomerDemoEntity'</returns>
		public Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemos(bool forceFetch)
		{
			return GetMultiCustomerCustomerDemos(forceFetch, _customerCustomerDemos.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'CustomerCustomerDemoEntity'</returns>
		public Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemos(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiCustomerCustomerDemos(forceFetch, _customerCustomerDemos.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemos(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiCustomerCustomerDemos(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection GetMultiCustomerCustomerDemos(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection>("CustomerCustomerDemos", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(null, this, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'CustomerCustomerDemos'. These settings will be taken into account
		/// when the property CustomerCustomerDemos is requested or GetMultiCustomerCustomerDemos is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersCustomerCustomerDemos(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_customerCustomerDemos.SortClauses=sortClauses;
			_customerCustomerDemos.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <param name="validator">The validator object for this CustomerDemographicEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.String customerTypeId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(customerTypeId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			_customerCustomerDemos = new Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection();
			_customerCustomerDemos.SetContainingEntityInfo(this, "CustomerDemographic");
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="customerTypeId">PK value for CustomerDemographic which data should be fetched into this CustomerDemographic object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)CustomerDemographicFieldIndex.CustomerTypeId].ForcedCurrentValueWrite(customerTypeId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateCustomerDemographicDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomerDemographicRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'CustomerCustomerDemo' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerCustomerDemos { get { return _staticMetaData.GetPrefetchPathElement("CustomerCustomerDemos", new Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection()); } }


		/// <summary>The CustomerDesc property of the Entity CustomerDemographic<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerDemographics"."CustomerDesc"<br/>
		/// Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CustomerDesc
		{
			get { return (System.String)GetValue((int)CustomerDemographicFieldIndex.CustomerDesc, true); }
			set	{ SetValue((int)CustomerDemographicFieldIndex.CustomerDesc, value, true); }
		}

		/// <summary>The CustomerTypeId property of the Entity CustomerDemographic<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerDemographics"."CustomerTypeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerTypeId
		{
			get { return (System.String)GetValue((int)CustomerDemographicFieldIndex.CustomerTypeId, true); }
			set	{ SetValue((int)CustomerDemographicFieldIndex.CustomerTypeId, value, true); }
		}

		/// <summary>Retrieves all related entities of type 'CustomerCustomerDemoEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual Northwind.SSDAL.CollectionClasses.CustomerCustomerDemoCollection CustomerCustomerDemos { get { return GetMultiCustomerCustomerDemos(false); } }

		/// <summary>Gets / sets the lazy loading flag for CustomerCustomerDemos. When set to true, CustomerCustomerDemos is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerCustomerDemos is accessed. You can always execute/ a forced fetch by calling GetMultiCustomerCustomerDemos(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerCustomerDemos
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerCustomerDemos"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerCustomerDemos", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerCustomerDemos already has been fetched. Setting this property to false when CustomerCustomerDemos has been fetched
		/// will clear the CustomerCustomerDemos collection well. Setting this property to true while CustomerCustomerDemos hasn't been fetched disables lazy loading for CustomerCustomerDemos</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerCustomerDemos
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerCustomerDemos");}
			set { SetAlreadyFetchedValueForNavigator("CustomerCustomerDemos", value, true);}
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Northwind.SSDAL
{
	public enum CustomerDemographicFieldIndex
	{
		///<summary>CustomerDesc. </summary>
		CustomerDesc,
		///<summary>CustomerTypeId. </summary>
		CustomerTypeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Northwind.SSDAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CustomerDemographic. </summary>
	public partial class CustomerDemographicRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CustomerDemographicEntity and CustomerCustomerDemoEntity over the 1:n relation they have, using the relation between the fields: CustomerDemographic.CustomerTypeId - CustomerCustomerDemo.CustomerTypeId</summary>
		public virtual IEntityRelation CustomerCustomerDemoEntityUsingCustomerTypeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomerCustomerDemos", true, new[] { CustomerDemographicFields.CustomerTypeId, CustomerCustomerDemoFields.CustomerTypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomerDemographicRelations
	{
		internal static readonly IEntityRelation CustomerCustomerDemoEntityUsingCustomerTypeIdStatic = new CustomerDemographicRelations().CustomerCustomerDemoEntityUsingCustomerTypeId;

		/// <summary>CTor</summary>
		static StaticCustomerDemographicRelations() { }
	}
}
