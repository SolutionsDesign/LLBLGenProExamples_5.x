//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Northwind.SSDAL.FactoryClasses;
using Northwind.SSDAL.DaoClasses;
using Northwind.SSDAL.RelationClasses;
using Northwind.SSDAL.HelperClasses;
using Northwind.SSDAL.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Northwind.SSDAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'OrderDetail'. <br/><br/></summary>
	[Serializable]
	public partial class OrderDetailEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private OrderEntity _order;
		private bool	_orderReturnsNewIfNotFound;
		private ProductEntity _product;
		private bool	_productReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static OrderDetailEntityStaticMetaData _staticMetaData = new OrderDetailEntityStaticMetaData();
		private static OrderDetailRelations _relationsFactory = new OrderDetailRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Order</summary>
			public static readonly string Order = "Order";
			/// <summary>Member name Product</summary>
			public static readonly string Product = "Product";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class OrderDetailEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public OrderDetailEntityStaticMetaData()
			{
				SetEntityCoreInfo("OrderDetailEntity", InheritanceHierarchyType.None, false, (int)Northwind.SSDAL.EntityType.OrderDetailEntity, typeof(OrderDetailEntity), typeof(OrderDetailEntityFactory), false);
				AddNavigatorMetaData<OrderDetailEntity, OrderEntity>("Order", "OrderDetails", (a, b) => a._order = b, a => a._order, (a, b) => a.Order = b, Northwind.SSDAL.RelationClasses.StaticOrderDetailRelations.OrderEntityUsingOrderIdStatic, ()=>new OrderDetailRelations().OrderEntityUsingOrderId, null, new int[] { (int)OrderDetailFieldIndex.OrderId }, null, true, (int)Northwind.SSDAL.EntityType.OrderEntity);
				AddNavigatorMetaData<OrderDetailEntity, ProductEntity>("Product", "OrderDetails", (a, b) => a._product = b, a => a._product, (a, b) => a.Product = b, Northwind.SSDAL.RelationClasses.StaticOrderDetailRelations.ProductEntityUsingProductIdStatic, ()=>new OrderDetailRelations().ProductEntityUsingProductId, null, new int[] { (int)OrderDetailFieldIndex.ProductId }, null, true, (int)Northwind.SSDAL.EntityType.ProductEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static OrderDetailEntity()
		{
		}

		/// <summary>CTor</summary>
		public OrderDetailEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		public OrderDetailEntity(System.Int32 orderId, System.Int32 productId)
		{
			InitClassFetch(orderId, productId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public OrderDetailEntity(System.Int32 orderId, System.Int32 productId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(orderId, productId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="validator">The custom validator object for this OrderDetailEntity</param>
		public OrderDetailEntity(System.Int32 orderId, System.Int32 productId, IValidator validator)
		{
			InitClassFetch(orderId, productId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected OrderDetailEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId, System.Int32 productId)
		{
			return FetchUsingPK(orderId, productId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId, System.Int32 productId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(orderId, productId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId, System.Int32 productId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(orderId, productId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId, System.Int32 productId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(orderId, productId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.OrderId, this.ProductId, null, null, null);
		}

		/// <summary>Retrieves the related entity of type 'OrderEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'OrderEntity' which is related to this entity.</returns>
		public virtual OrderEntity GetSingleOrder(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<OrderEntity>("Order", forceFetch, _orderReturnsNewIfNotFound, e=>e.FetchUsingPK(this.OrderId));
		}

		/// <summary>Retrieves the related entity of type 'ProductEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'ProductEntity' which is related to this entity.</returns>
		public virtual ProductEntity GetSingleProduct(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<ProductEntity>("Product", forceFetch, _productReturnsNewIfNotFound, e=>e.FetchUsingPK(this.ProductId));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="validator">The validator object for this OrderDetailEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Int32 orderId, System.Int32 productId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(orderId, productId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{			_orderReturnsNewIfNotFound = false;
			_productReturnsNewIfNotFound = false;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="orderId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="productId">PK value for OrderDetail which data should be fetched into this OrderDetail object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.Int32 orderId, System.Int32 productId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)OrderDetailFieldIndex.OrderId].ForcedCurrentValueWrite(orderId);
				this.Fields[(int)OrderDetailFieldIndex.ProductId].ForcedCurrentValueWrite(productId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateOrderDetailDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static OrderDetailRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Order'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathOrder { get { return _staticMetaData.GetPrefetchPathElement("Order", new Northwind.SSDAL.CollectionClasses.OrderCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Product'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathProduct { get { return _staticMetaData.GetPrefetchPathElement("Product", new Northwind.SSDAL.CollectionClasses.ProductCollection()); } }


		/// <summary>The Discount property of the Entity OrderDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Order Details"."Discount"<br/>
		/// Table field type characteristics (type, precision, scale, length): Real, 24, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Single Discount
		{
			get { return (System.Single)GetValue((int)OrderDetailFieldIndex.Discount, true); }
			set	{ SetValue((int)OrderDetailFieldIndex.Discount, value, true); }
		}

		/// <summary>The OrderId property of the Entity OrderDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Order Details"."OrderID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 OrderId
		{
			get { return (System.Int32)GetValue((int)OrderDetailFieldIndex.OrderId, true); }
			set	{ SetValue((int)OrderDetailFieldIndex.OrderId, value, true); }
		}

		/// <summary>The ProductId property of the Entity OrderDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Order Details"."ProductID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 ProductId
		{
			get { return (System.Int32)GetValue((int)OrderDetailFieldIndex.ProductId, true); }
			set	{ SetValue((int)OrderDetailFieldIndex.ProductId, value, true); }
		}

		/// <summary>The Quantity property of the Entity OrderDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Order Details"."Quantity"<br/>
		/// Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int16 Quantity
		{
			get { return (System.Int16)GetValue((int)OrderDetailFieldIndex.Quantity, true); }
			set	{ SetValue((int)OrderDetailFieldIndex.Quantity, value, true); }
		}

		/// <summary>The UnitPrice property of the Entity OrderDetail<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Order Details"."UnitPrice"<br/>
		/// Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal UnitPrice
		{
			get { return (System.Decimal)GetValue((int)OrderDetailFieldIndex.UnitPrice, true); }
			set	{ SetValue((int)OrderDetailFieldIndex.UnitPrice, value, true); }
		}


		/// <summary>Gets / sets related entity of type 'OrderEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual OrderEntity Order
		{
			get	{ return GetSingleOrder(false); }
			set { SetSingleRelatedEntityNavigator(value, "Order"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Order. When set to true, Order is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Order is accessed. You can always execute a forced fetch by calling GetSingleOrder(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchOrder
		{
			get	{ return GetAlwaysFetchValueForNavigator("Order"); }
			set	{ SetAlwaysFetchValueForNavigator("Order", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Order already has been fetched. Setting this property to false when Order has been fetched
		/// will set Order to null as well. Setting this property to true while Order hasn't been fetched disables lazy loading for Order</summary>
		[Browsable(false)]
		public bool AlreadyFetchedOrder
		{
			get { return GetAlreadyFetchedValueForNavigator("Order");}
			set { SetAlreadyFetchedValueForNavigator("Order", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Order is not found
		/// in the database. When set to true, Order will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool OrderReturnsNewIfNotFound
		{
			get	{ return _orderReturnsNewIfNotFound; }
			set { _orderReturnsNewIfNotFound = value; }	
		}

		/// <summary>Gets / sets related entity of type 'ProductEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual ProductEntity Product
		{
			get	{ return GetSingleProduct(false); }
			set { SetSingleRelatedEntityNavigator(value, "Product"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Product. When set to true, Product is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Product is accessed. You can always execute a forced fetch by calling GetSingleProduct(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchProduct
		{
			get	{ return GetAlwaysFetchValueForNavigator("Product"); }
			set	{ SetAlwaysFetchValueForNavigator("Product", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Product already has been fetched. Setting this property to false when Product has been fetched
		/// will set Product to null as well. Setting this property to true while Product hasn't been fetched disables lazy loading for Product</summary>
		[Browsable(false)]
		public bool AlreadyFetchedProduct
		{
			get { return GetAlreadyFetchedValueForNavigator("Product");}
			set { SetAlreadyFetchedValueForNavigator("Product", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Product is not found
		/// in the database. When set to true, Product will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool ProductReturnsNewIfNotFound
		{
			get	{ return _productReturnsNewIfNotFound; }
			set { _productReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Northwind.SSDAL
{
	public enum OrderDetailFieldIndex
	{
		///<summary>Discount. </summary>
		Discount,
		///<summary>OrderId. </summary>
		OrderId,
		///<summary>ProductId. </summary>
		ProductId,
		///<summary>Quantity. </summary>
		Quantity,
		///<summary>UnitPrice. </summary>
		UnitPrice,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Northwind.SSDAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: OrderDetail. </summary>
	public partial class OrderDetailRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between OrderDetailEntity and OrderEntity over the m:1 relation they have, using the relation between the fields: OrderDetail.OrderId - Order.OrderId</summary>
		public virtual IEntityRelation OrderEntityUsingOrderId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Order", false, new[] { OrderFields.OrderId, OrderDetailFields.OrderId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderDetailEntity and ProductEntity over the m:1 relation they have, using the relation between the fields: OrderDetail.ProductId - Product.ProductId</summary>
		public virtual IEntityRelation ProductEntityUsingProductId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Product", false, new[] { ProductFields.ProductId, OrderDetailFields.ProductId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticOrderDetailRelations
	{
		internal static readonly IEntityRelation OrderEntityUsingOrderIdStatic = new OrderDetailRelations().OrderEntityUsingOrderId;
		internal static readonly IEntityRelation ProductEntityUsingProductIdStatic = new OrderDetailRelations().ProductEntityUsingProductId;

		/// <summary>CTor</summary>
		static StaticOrderDetailRelations() { }
	}
}
