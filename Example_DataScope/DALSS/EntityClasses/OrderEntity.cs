//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Northwind.SSDAL.FactoryClasses;
using Northwind.SSDAL.DaoClasses;
using Northwind.SSDAL.RelationClasses;
using Northwind.SSDAL.HelperClasses;
using Northwind.SSDAL.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Northwind.SSDAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Order'. <br/><br/></summary>
	[Serializable]
	public partial class OrderEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection	_orderAuditInfos;
		private Northwind.SSDAL.CollectionClasses.OrderDetailCollection	_orderDetails;
		private CustomerEntity _customer;
		private bool	_customerReturnsNewIfNotFound;
		private EmployeeEntity _employee;
		private bool	_employeeReturnsNewIfNotFound;
		private ShipperEntity _shipper;
		private bool	_shipperReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static OrderEntityStaticMetaData _staticMetaData = new OrderEntityStaticMetaData();
		private static OrderRelations _relationsFactory = new OrderRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Customer</summary>
			public static readonly string Customer = "Customer";
			/// <summary>Member name Employee</summary>
			public static readonly string Employee = "Employee";
			/// <summary>Member name Shipper</summary>
			public static readonly string Shipper = "Shipper";
			/// <summary>Member name OrderAuditInfos</summary>
			public static readonly string OrderAuditInfos = "OrderAuditInfos";
			/// <summary>Member name OrderDetails</summary>
			public static readonly string OrderDetails = "OrderDetails";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class OrderEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public OrderEntityStaticMetaData()
			{
				SetEntityCoreInfo("OrderEntity", InheritanceHierarchyType.None, false, (int)Northwind.SSDAL.EntityType.OrderEntity, typeof(OrderEntity), typeof(OrderEntityFactory), false);
				AddNavigatorMetaData<OrderEntity, Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection>("OrderAuditInfos", a => a._orderAuditInfos, (a, b) => a._orderAuditInfos = b, a => a.OrderAuditInfos, () => new OrderRelations().OrderAuditInfoEntityUsingOrderId, typeof(OrderAuditInfoEntity), (int)Northwind.SSDAL.EntityType.OrderAuditInfoEntity);
				AddNavigatorMetaData<OrderEntity, Northwind.SSDAL.CollectionClasses.OrderDetailCollection>("OrderDetails", a => a._orderDetails, (a, b) => a._orderDetails = b, a => a.OrderDetails, () => new OrderRelations().OrderDetailEntityUsingOrderId, typeof(OrderDetailEntity), (int)Northwind.SSDAL.EntityType.OrderDetailEntity);
				AddNavigatorMetaData<OrderEntity, CustomerEntity>("Customer", "Orders", (a, b) => a._customer = b, a => a._customer, (a, b) => a.Customer = b, Northwind.SSDAL.RelationClasses.StaticOrderRelations.CustomerEntityUsingCustomerIdStatic, ()=>new OrderRelations().CustomerEntityUsingCustomerId, null, new int[] { (int)OrderFieldIndex.CustomerId }, null, true, (int)Northwind.SSDAL.EntityType.CustomerEntity);
				AddNavigatorMetaData<OrderEntity, EmployeeEntity>("Employee", "Orders", (a, b) => a._employee = b, a => a._employee, (a, b) => a.Employee = b, Northwind.SSDAL.RelationClasses.StaticOrderRelations.EmployeeEntityUsingEmployeeIdStatic, ()=>new OrderRelations().EmployeeEntityUsingEmployeeId, null, new int[] { (int)OrderFieldIndex.EmployeeId }, null, true, (int)Northwind.SSDAL.EntityType.EmployeeEntity);
				AddNavigatorMetaData<OrderEntity, ShipperEntity>("Shipper", "Orders", (a, b) => a._shipper = b, a => a._shipper, (a, b) => a.Shipper = b, Northwind.SSDAL.RelationClasses.StaticOrderRelations.ShipperEntityUsingShipViaStatic, ()=>new OrderRelations().ShipperEntityUsingShipVia, null, new int[] { (int)OrderFieldIndex.ShipVia }, null, true, (int)Northwind.SSDAL.EntityType.ShipperEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static OrderEntity()
		{
		}

		/// <summary>CTor</summary>
		public OrderEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		public OrderEntity(System.Int32 orderId)
		{
			InitClassFetch(orderId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public OrderEntity(System.Int32 orderId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(orderId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <param name="validator">The custom validator object for this OrderEntity</param>
		public OrderEntity(System.Int32 orderId, IValidator validator)
		{
			InitClassFetch(orderId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected OrderEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId)
		{
			return FetchUsingPK(orderId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(orderId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(orderId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Int32 orderId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(orderId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.OrderId, null, null, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderAuditInfoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'OrderAuditInfoEntity'</returns>
		public Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection GetMultiOrderAuditInfos(bool forceFetch)
		{
			return GetMultiOrderAuditInfos(forceFetch, _orderAuditInfos.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderAuditInfoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'OrderAuditInfoEntity'</returns>
		public Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection GetMultiOrderAuditInfos(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiOrderAuditInfos(forceFetch, _orderAuditInfos.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'OrderAuditInfoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection GetMultiOrderAuditInfos(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiOrderAuditInfos(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderAuditInfoEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection GetMultiOrderAuditInfos(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection>("OrderAuditInfos", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(null, this, null, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'OrderAuditInfos'. These settings will be taken into account
		/// when the property OrderAuditInfos is requested or GetMultiOrderAuditInfos is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersOrderAuditInfos(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_orderAuditInfos.SortClauses=sortClauses;
			_orderAuditInfos.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves all related entities of type 'OrderDetailEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <returns>Filled collection with all related entities of type 'OrderDetailEntity'</returns>
		public Northwind.SSDAL.CollectionClasses.OrderDetailCollection GetMultiOrderDetails(bool forceFetch)
		{
			return GetMultiOrderDetails(forceFetch, _orderDetails.EntityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderDetailEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of type 'OrderDetailEntity'</returns>
		public Northwind.SSDAL.CollectionClasses.OrderDetailCollection GetMultiOrderDetails(bool forceFetch, IPredicateExpression filter)
		{
			return GetMultiOrderDetails(forceFetch, _orderDetails.EntityFactoryToUse, filter);
		}

		/// <summary>Retrieves all related entities of type 'OrderDetailEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public Northwind.SSDAL.CollectionClasses.OrderDetailCollection GetMultiOrderDetails(bool forceFetch, IEntityFactory entityFactoryToUse)
		{
			return GetMultiOrderDetails(forceFetch, entityFactoryToUse, null);
		}

		/// <summary>Retrieves all related entities of type 'OrderDetailEntity' using a relation of type '1:n'.</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the collection and will rerun the complete query instead</param>
		/// <param name="entityFactoryToUse">The entity factory to use for the GetMultiManyToOne() routine.</param>
		/// <param name="filter">Extra filter to limit the resultset.</param>
		/// <returns>Filled collection with all related entities of the type constructed by the passed in entity factory</returns>
		public virtual Northwind.SSDAL.CollectionClasses.OrderDetailCollection GetMultiOrderDetails(bool forceFetch, IEntityFactory entityFactoryToUse, IPredicateExpression filter)
		{
			return PerformMultiEntityLazyLoading<Northwind.SSDAL.CollectionClasses.OrderDetailCollection>("OrderDetails", forceFetch, entityFactoryToUse, (c,r)=>c.GetMultiManyToOne(this, null, filter));
		}

		/// <summary>Sets the collection parameters for the collection for 'OrderDetails'. These settings will be taken into account
		/// when the property OrderDetails is requested or GetMultiOrderDetails is called.</summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return. When set to 0, this parameter is ignored</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified (null), no sorting is applied.</param>
		public virtual void SetCollectionParametersOrderDetails(long maxNumberOfItemsToReturn, ISortExpression sortClauses)
		{
			_orderDetails.SortClauses=sortClauses;
			_orderDetails.MaxNumberOfItemsToReturn=maxNumberOfItemsToReturn;
		}

		/// <summary>Retrieves the related entity of type 'CustomerEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'CustomerEntity' which is related to this entity.</returns>
		public virtual CustomerEntity GetSingleCustomer(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<CustomerEntity>("Customer", forceFetch, _customerReturnsNewIfNotFound, e=>e.FetchUsingPK(this.CustomerId));
		}

		/// <summary>Retrieves the related entity of type 'EmployeeEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'EmployeeEntity' which is related to this entity.</returns>
		public virtual EmployeeEntity GetSingleEmployee(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<EmployeeEntity>("Employee", forceFetch, _employeeReturnsNewIfNotFound, e=>e.FetchUsingPK(this.EmployeeId.GetValueOrDefault()));
		}

		/// <summary>Retrieves the related entity of type 'ShipperEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'ShipperEntity' which is related to this entity.</returns>
		public virtual ShipperEntity GetSingleShipper(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<ShipperEntity>("Shipper", forceFetch, _shipperReturnsNewIfNotFound, e=>e.FetchUsingPK(this.ShipVia.GetValueOrDefault()));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <param name="validator">The validator object for this OrderEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Int32 orderId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(orderId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			_orderAuditInfos = new Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection();
			_orderAuditInfos.SetContainingEntityInfo(this, "Order");

			_orderDetails = new Northwind.SSDAL.CollectionClasses.OrderDetailCollection();
			_orderDetails.SetContainingEntityInfo(this, "Order");
			_customerReturnsNewIfNotFound = false;
			_employeeReturnsNewIfNotFound = false;
			_shipperReturnsNewIfNotFound = false;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="orderId">PK value for Order which data should be fetched into this Order object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.Int32 orderId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)OrderFieldIndex.OrderId].ForcedCurrentValueWrite(orderId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateOrderDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static OrderRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'OrderAuditInfo' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathOrderAuditInfos { get { return _staticMetaData.GetPrefetchPathElement("OrderAuditInfos", new Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'OrderDetail' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathOrderDetails { get { return _staticMetaData.GetPrefetchPathElement("OrderDetails", new Northwind.SSDAL.CollectionClasses.OrderDetailCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Customer'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomer { get { return _staticMetaData.GetPrefetchPathElement("Customer", new Northwind.SSDAL.CollectionClasses.CustomerCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Employee'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathEmployee { get { return _staticMetaData.GetPrefetchPathElement("Employee", new Northwind.SSDAL.CollectionClasses.EmployeeCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Shipper'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathShipper { get { return _staticMetaData.GetPrefetchPathElement("Shipper", new Northwind.SSDAL.CollectionClasses.ShipperCollection()); } }


		/// <summary>The CustomerId property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."CustomerID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 5<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CustomerId
		{
			get { return (System.String)GetValue((int)OrderFieldIndex.CustomerId, true); }
			set	{ SetValue((int)OrderFieldIndex.CustomerId, value, true); }
		}

		/// <summary>The EmployeeId property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."EmployeeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> EmployeeId
		{
			get { return (Nullable<System.Int32>)GetValue((int)OrderFieldIndex.EmployeeId, false); }
			set	{ SetValue((int)OrderFieldIndex.EmployeeId, value, true); }
		}

		/// <summary>The Freight property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."Freight"<br/>
		/// Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> Freight
		{
			get { return (Nullable<System.Decimal>)GetValue((int)OrderFieldIndex.Freight, false); }
			set	{ SetValue((int)OrderFieldIndex.Freight, value, true); }
		}

		/// <summary>The OrderDate property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."OrderDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> OrderDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)OrderFieldIndex.OrderDate, false); }
			set	{ SetValue((int)OrderFieldIndex.OrderDate, value, true); }
		}

		/// <summary>The OrderId property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."OrderID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 OrderId
		{
			get { return (System.Int32)GetValue((int)OrderFieldIndex.OrderId, true); }
			set	{ SetValue((int)OrderFieldIndex.OrderId, value, true); }
		}

		/// <summary>The RequiredDate property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."RequiredDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> RequiredDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)OrderFieldIndex.RequiredDate, false); }
			set	{ SetValue((int)OrderFieldIndex.RequiredDate, value, true); }
		}

		/// <summary>The ShipAddress property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipAddress"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipAddress
		{
			get { return (System.String)GetValue((int)OrderFieldIndex.ShipAddress, true); }
			set	{ SetValue((int)OrderFieldIndex.ShipAddress, value, true); }
		}

		/// <summary>The ShipCity property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipCity"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipCity
		{
			get { return (System.String)GetValue((int)OrderFieldIndex.ShipCity, true); }
			set	{ SetValue((int)OrderFieldIndex.ShipCity, value, true); }
		}

		/// <summary>The ShipCountry property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipCountry"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipCountry
		{
			get { return (System.String)GetValue((int)OrderFieldIndex.ShipCountry, true); }
			set	{ SetValue((int)OrderFieldIndex.ShipCountry, value, true); }
		}

		/// <summary>The ShipName property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipName"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipName
		{
			get { return (System.String)GetValue((int)OrderFieldIndex.ShipName, true); }
			set	{ SetValue((int)OrderFieldIndex.ShipName, value, true); }
		}

		/// <summary>The ShippedDate property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShippedDate"<br/>
		/// Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> ShippedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)OrderFieldIndex.ShippedDate, false); }
			set	{ SetValue((int)OrderFieldIndex.ShippedDate, value, true); }
		}

		/// <summary>The ShipPostalCode property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipPostalCode"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipPostalCode
		{
			get { return (System.String)GetValue((int)OrderFieldIndex.ShipPostalCode, true); }
			set	{ SetValue((int)OrderFieldIndex.ShipPostalCode, value, true); }
		}

		/// <summary>The ShipRegion property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipRegion"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ShipRegion
		{
			get { return (System.String)GetValue((int)OrderFieldIndex.ShipRegion, true); }
			set	{ SetValue((int)OrderFieldIndex.ShipRegion, value, true); }
		}

		/// <summary>The ShipVia property of the Entity Order<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Orders"."ShipVia"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ShipVia
		{
			get { return (Nullable<System.Int32>)GetValue((int)OrderFieldIndex.ShipVia, false); }
			set	{ SetValue((int)OrderFieldIndex.ShipVia, value, true); }
		}

		/// <summary>Retrieves all related entities of type 'OrderAuditInfoEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual Northwind.SSDAL.CollectionClasses.OrderAuditInfoCollection OrderAuditInfos { get { return GetMultiOrderAuditInfos(false); } }

		/// <summary>Gets / sets the lazy loading flag for OrderAuditInfos. When set to true, OrderAuditInfos is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time OrderAuditInfos is accessed. You can always execute/ a forced fetch by calling GetMultiOrderAuditInfos(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchOrderAuditInfos
		{
			get	{ return GetAlwaysFetchValueForNavigator("OrderAuditInfos"); }
			set	{ SetAlwaysFetchValueForNavigator("OrderAuditInfos", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property OrderAuditInfos already has been fetched. Setting this property to false when OrderAuditInfos has been fetched
		/// will clear the OrderAuditInfos collection well. Setting this property to true while OrderAuditInfos hasn't been fetched disables lazy loading for OrderAuditInfos</summary>
		[Browsable(false)]
		public bool AlreadyFetchedOrderAuditInfos
		{
			get { return GetAlreadyFetchedValueForNavigator("OrderAuditInfos");}
			set { SetAlreadyFetchedValueForNavigator("OrderAuditInfos", value, true);}
		}
		/// <summary>Retrieves all related entities of type 'OrderDetailEntity' using a relation of type '1:n'.<br/><br/></summary>
		public virtual Northwind.SSDAL.CollectionClasses.OrderDetailCollection OrderDetails { get { return GetMultiOrderDetails(false); } }

		/// <summary>Gets / sets the lazy loading flag for OrderDetails. When set to true, OrderDetails is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time OrderDetails is accessed. You can always execute/ a forced fetch by calling GetMultiOrderDetails(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchOrderDetails
		{
			get	{ return GetAlwaysFetchValueForNavigator("OrderDetails"); }
			set	{ SetAlwaysFetchValueForNavigator("OrderDetails", value); }	
		}		
				
		/// <summary>Gets / Sets the lazy loading flag if the property OrderDetails already has been fetched. Setting this property to false when OrderDetails has been fetched
		/// will clear the OrderDetails collection well. Setting this property to true while OrderDetails hasn't been fetched disables lazy loading for OrderDetails</summary>
		[Browsable(false)]
		public bool AlreadyFetchedOrderDetails
		{
			get { return GetAlreadyFetchedValueForNavigator("OrderDetails");}
			set { SetAlreadyFetchedValueForNavigator("OrderDetails", value, true);}
		}

		/// <summary>Gets / sets related entity of type 'CustomerEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual CustomerEntity Customer
		{
			get	{ return GetSingleCustomer(false); }
			set { SetSingleRelatedEntityNavigator(value, "Customer"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Customer. When set to true, Customer is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Customer is accessed. You can always execute a forced fetch by calling GetSingleCustomer(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomer
		{
			get	{ return GetAlwaysFetchValueForNavigator("Customer"); }
			set	{ SetAlwaysFetchValueForNavigator("Customer", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Customer already has been fetched. Setting this property to false when Customer has been fetched
		/// will set Customer to null as well. Setting this property to true while Customer hasn't been fetched disables lazy loading for Customer</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomer
		{
			get { return GetAlreadyFetchedValueForNavigator("Customer");}
			set { SetAlreadyFetchedValueForNavigator("Customer", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Customer is not found
		/// in the database. When set to true, Customer will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool CustomerReturnsNewIfNotFound
		{
			get	{ return _customerReturnsNewIfNotFound; }
			set { _customerReturnsNewIfNotFound = value; }	
		}

		/// <summary>Gets / sets related entity of type 'EmployeeEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual EmployeeEntity Employee
		{
			get	{ return GetSingleEmployee(false); }
			set { SetSingleRelatedEntityNavigator(value, "Employee"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Employee. When set to true, Employee is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Employee is accessed. You can always execute a forced fetch by calling GetSingleEmployee(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchEmployee
		{
			get	{ return GetAlwaysFetchValueForNavigator("Employee"); }
			set	{ SetAlwaysFetchValueForNavigator("Employee", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Employee already has been fetched. Setting this property to false when Employee has been fetched
		/// will set Employee to null as well. Setting this property to true while Employee hasn't been fetched disables lazy loading for Employee</summary>
		[Browsable(false)]
		public bool AlreadyFetchedEmployee
		{
			get { return GetAlreadyFetchedValueForNavigator("Employee");}
			set { SetAlreadyFetchedValueForNavigator("Employee", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Employee is not found
		/// in the database. When set to true, Employee will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool EmployeeReturnsNewIfNotFound
		{
			get	{ return _employeeReturnsNewIfNotFound; }
			set { _employeeReturnsNewIfNotFound = value; }	
		}

		/// <summary>Gets / sets related entity of type 'ShipperEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual ShipperEntity Shipper
		{
			get	{ return GetSingleShipper(false); }
			set { SetSingleRelatedEntityNavigator(value, "Shipper"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Shipper. When set to true, Shipper is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Shipper is accessed. You can always execute a forced fetch by calling GetSingleShipper(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchShipper
		{
			get	{ return GetAlwaysFetchValueForNavigator("Shipper"); }
			set	{ SetAlwaysFetchValueForNavigator("Shipper", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Shipper already has been fetched. Setting this property to false when Shipper has been fetched
		/// will set Shipper to null as well. Setting this property to true while Shipper hasn't been fetched disables lazy loading for Shipper</summary>
		[Browsable(false)]
		public bool AlreadyFetchedShipper
		{
			get { return GetAlreadyFetchedValueForNavigator("Shipper");}
			set { SetAlreadyFetchedValueForNavigator("Shipper", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Shipper is not found
		/// in the database. When set to true, Shipper will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool ShipperReturnsNewIfNotFound
		{
			get	{ return _shipperReturnsNewIfNotFound; }
			set { _shipperReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Northwind.SSDAL
{
	public enum OrderFieldIndex
	{
		///<summary>CustomerId. </summary>
		CustomerId,
		///<summary>EmployeeId. </summary>
		EmployeeId,
		///<summary>Freight. </summary>
		Freight,
		///<summary>OrderDate. </summary>
		OrderDate,
		///<summary>OrderId. </summary>
		OrderId,
		///<summary>RequiredDate. </summary>
		RequiredDate,
		///<summary>ShipAddress. </summary>
		ShipAddress,
		///<summary>ShipCity. </summary>
		ShipCity,
		///<summary>ShipCountry. </summary>
		ShipCountry,
		///<summary>ShipName. </summary>
		ShipName,
		///<summary>ShippedDate. </summary>
		ShippedDate,
		///<summary>ShipPostalCode. </summary>
		ShipPostalCode,
		///<summary>ShipRegion. </summary>
		ShipRegion,
		///<summary>ShipVia. </summary>
		ShipVia,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Northwind.SSDAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Order. </summary>
	public partial class OrderRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between OrderEntity and OrderAuditInfoEntity over the 1:n relation they have, using the relation between the fields: Order.OrderId - OrderAuditInfo.OrderId</summary>
		public virtual IEntityRelation OrderAuditInfoEntityUsingOrderId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "OrderAuditInfos", true, new[] { OrderFields.OrderId, OrderAuditInfoFields.OrderId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderEntity and OrderDetailEntity over the 1:n relation they have, using the relation between the fields: Order.OrderId - OrderDetail.OrderId</summary>
		public virtual IEntityRelation OrderDetailEntityUsingOrderId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "OrderDetails", true, new[] { OrderFields.OrderId, OrderDetailFields.OrderId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderEntity and CustomerEntity over the m:1 relation they have, using the relation between the fields: Order.CustomerId - Customer.CustomerId</summary>
		public virtual IEntityRelation CustomerEntityUsingCustomerId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Customer", false, new[] { CustomerFields.CustomerId, OrderFields.CustomerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderEntity and EmployeeEntity over the m:1 relation they have, using the relation between the fields: Order.EmployeeId - Employee.EmployeeId</summary>
		public virtual IEntityRelation EmployeeEntityUsingEmployeeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Employee", false, new[] { EmployeeFields.EmployeeId, OrderFields.EmployeeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderEntity and ShipperEntity over the m:1 relation they have, using the relation between the fields: Order.ShipVia - Shipper.ShipperId</summary>
		public virtual IEntityRelation ShipperEntityUsingShipVia
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Shipper", false, new[] { ShipperFields.ShipperId, OrderFields.ShipVia }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticOrderRelations
	{
		internal static readonly IEntityRelation OrderAuditInfoEntityUsingOrderIdStatic = new OrderRelations().OrderAuditInfoEntityUsingOrderId;
		internal static readonly IEntityRelation OrderDetailEntityUsingOrderIdStatic = new OrderRelations().OrderDetailEntityUsingOrderId;
		internal static readonly IEntityRelation CustomerEntityUsingCustomerIdStatic = new OrderRelations().CustomerEntityUsingCustomerId;
		internal static readonly IEntityRelation EmployeeEntityUsingEmployeeIdStatic = new OrderRelations().EmployeeEntityUsingEmployeeId;
		internal static readonly IEntityRelation ShipperEntityUsingShipViaStatic = new OrderRelations().ShipperEntityUsingShipVia;

		/// <summary>CTor</summary>
		static StaticOrderRelations() { }
	}
}
