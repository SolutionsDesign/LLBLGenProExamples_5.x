//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Northwind.SSDAL.FactoryClasses;
using Northwind.SSDAL.DaoClasses;
using Northwind.SSDAL.RelationClasses;
using Northwind.SSDAL.HelperClasses;
using Northwind.SSDAL.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Northwind.SSDAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'CustomerCustomerDemo'. <br/><br/></summary>
	[Serializable]
	public partial class CustomerCustomerDemoEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private CustomerEntity _customer;
		private bool	_customerReturnsNewIfNotFound;
		private CustomerDemographicEntity _customerDemographic;
		private bool	_customerDemographicReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static CustomerCustomerDemoEntityStaticMetaData _staticMetaData = new CustomerCustomerDemoEntityStaticMetaData();
		private static CustomerCustomerDemoRelations _relationsFactory = new CustomerCustomerDemoRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Customer</summary>
			public static readonly string Customer = "Customer";
			/// <summary>Member name CustomerDemographic</summary>
			public static readonly string CustomerDemographic = "CustomerDemographic";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CustomerCustomerDemoEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CustomerCustomerDemoEntityStaticMetaData()
			{
				SetEntityCoreInfo("CustomerCustomerDemoEntity", InheritanceHierarchyType.None, false, (int)Northwind.SSDAL.EntityType.CustomerCustomerDemoEntity, typeof(CustomerCustomerDemoEntity), typeof(CustomerCustomerDemoEntityFactory), false);
				AddNavigatorMetaData<CustomerCustomerDemoEntity, CustomerEntity>("Customer", "CustomerCustomerDemos", (a, b) => a._customer = b, a => a._customer, (a, b) => a.Customer = b, Northwind.SSDAL.RelationClasses.StaticCustomerCustomerDemoRelations.CustomerEntityUsingCustomerIdStatic, ()=>new CustomerCustomerDemoRelations().CustomerEntityUsingCustomerId, null, new int[] { (int)CustomerCustomerDemoFieldIndex.CustomerId }, null, true, (int)Northwind.SSDAL.EntityType.CustomerEntity);
				AddNavigatorMetaData<CustomerCustomerDemoEntity, CustomerDemographicEntity>("CustomerDemographic", "CustomerCustomerDemos", (a, b) => a._customerDemographic = b, a => a._customerDemographic, (a, b) => a.CustomerDemographic = b, Northwind.SSDAL.RelationClasses.StaticCustomerCustomerDemoRelations.CustomerDemographicEntityUsingCustomerTypeIdStatic, ()=>new CustomerCustomerDemoRelations().CustomerDemographicEntityUsingCustomerTypeId, null, new int[] { (int)CustomerCustomerDemoFieldIndex.CustomerTypeId }, null, true, (int)Northwind.SSDAL.EntityType.CustomerDemographicEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static CustomerCustomerDemoEntity()
		{
		}

		/// <summary>CTor</summary>
		public CustomerCustomerDemoEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		public CustomerCustomerDemoEntity(System.String customerId, System.String customerTypeId)
		{
			InitClassFetch(customerId, customerTypeId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public CustomerCustomerDemoEntity(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(customerId, customerTypeId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="validator">The custom validator object for this CustomerCustomerDemoEntity</param>
		public CustomerCustomerDemoEntity(System.String customerId, System.String customerTypeId, IValidator validator)
		{
			InitClassFetch(customerId, customerTypeId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CustomerCustomerDemoEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId)
		{
			return FetchUsingPK(customerId, customerTypeId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(customerId, customerTypeId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(customerId, customerTypeId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(customerId, customerTypeId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.CustomerId, this.CustomerTypeId, null, null, null);
		}

		/// <summary>Retrieves the related entity of type 'CustomerEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'CustomerEntity' which is related to this entity.</returns>
		public virtual CustomerEntity GetSingleCustomer(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<CustomerEntity>("Customer", forceFetch, _customerReturnsNewIfNotFound, e=>e.FetchUsingPK(this.CustomerId));
		}

		/// <summary>Retrieves the related entity of type 'CustomerDemographicEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'CustomerDemographicEntity' which is related to this entity.</returns>
		public virtual CustomerDemographicEntity GetSingleCustomerDemographic(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<CustomerDemographicEntity>("CustomerDemographic", forceFetch, _customerDemographicReturnsNewIfNotFound, e=>e.FetchUsingPK(this.CustomerTypeId));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="validator">The validator object for this CustomerCustomerDemoEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.String customerId, System.String customerTypeId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(customerId, customerTypeId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{			_customerReturnsNewIfNotFound = false;
			_customerDemographicReturnsNewIfNotFound = false;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="customerId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="customerTypeId">PK value for CustomerCustomerDemo which data should be fetched into this CustomerCustomerDemo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.String customerId, System.String customerTypeId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)CustomerCustomerDemoFieldIndex.CustomerId].ForcedCurrentValueWrite(customerId);
				this.Fields[(int)CustomerCustomerDemoFieldIndex.CustomerTypeId].ForcedCurrentValueWrite(customerTypeId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateCustomerCustomerDemoDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CustomerCustomerDemoRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Customer'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomer { get { return _staticMetaData.GetPrefetchPathElement("Customer", new Northwind.SSDAL.CollectionClasses.CustomerCollection()); } }

		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'CustomerDemographic'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathCustomerDemographic { get { return _staticMetaData.GetPrefetchPathElement("CustomerDemographic", new Northwind.SSDAL.CollectionClasses.CustomerDemographicCollection()); } }


		/// <summary>The CustomerId property of the Entity CustomerCustomerDemo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerCustomerDemo"."CustomerID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 5<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerId
		{
			get { return (System.String)GetValue((int)CustomerCustomerDemoFieldIndex.CustomerId, true); }
			set	{ SetValue((int)CustomerCustomerDemoFieldIndex.CustomerId, value, true); }
		}

		/// <summary>The CustomerTypeId property of the Entity CustomerCustomerDemo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "CustomerCustomerDemo"."CustomerTypeID"<br/>
		/// Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 10<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String CustomerTypeId
		{
			get { return (System.String)GetValue((int)CustomerCustomerDemoFieldIndex.CustomerTypeId, true); }
			set	{ SetValue((int)CustomerCustomerDemoFieldIndex.CustomerTypeId, value, true); }
		}


		/// <summary>Gets / sets related entity of type 'CustomerEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual CustomerEntity Customer
		{
			get	{ return GetSingleCustomer(false); }
			set { SetSingleRelatedEntityNavigator(value, "Customer"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Customer. When set to true, Customer is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Customer is accessed. You can always execute a forced fetch by calling GetSingleCustomer(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomer
		{
			get	{ return GetAlwaysFetchValueForNavigator("Customer"); }
			set	{ SetAlwaysFetchValueForNavigator("Customer", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Customer already has been fetched. Setting this property to false when Customer has been fetched
		/// will set Customer to null as well. Setting this property to true while Customer hasn't been fetched disables lazy loading for Customer</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomer
		{
			get { return GetAlreadyFetchedValueForNavigator("Customer");}
			set { SetAlreadyFetchedValueForNavigator("Customer", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Customer is not found
		/// in the database. When set to true, Customer will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool CustomerReturnsNewIfNotFound
		{
			get	{ return _customerReturnsNewIfNotFound; }
			set { _customerReturnsNewIfNotFound = value; }	
		}

		/// <summary>Gets / sets related entity of type 'CustomerDemographicEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual CustomerDemographicEntity CustomerDemographic
		{
			get	{ return GetSingleCustomerDemographic(false); }
			set { SetSingleRelatedEntityNavigator(value, "CustomerDemographic"); }
		}

		/// <summary>Gets / sets the lazy loading flag for CustomerDemographic. When set to true, CustomerDemographic is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time CustomerDemographic is accessed. You can always execute a forced fetch by calling GetSingleCustomerDemographic(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchCustomerDemographic
		{
			get	{ return GetAlwaysFetchValueForNavigator("CustomerDemographic"); }
			set	{ SetAlwaysFetchValueForNavigator("CustomerDemographic", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property CustomerDemographic already has been fetched. Setting this property to false when CustomerDemographic has been fetched
		/// will set CustomerDemographic to null as well. Setting this property to true while CustomerDemographic hasn't been fetched disables lazy loading for CustomerDemographic</summary>
		[Browsable(false)]
		public bool AlreadyFetchedCustomerDemographic
		{
			get { return GetAlreadyFetchedValueForNavigator("CustomerDemographic");}
			set { SetAlreadyFetchedValueForNavigator("CustomerDemographic", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property CustomerDemographic is not found
		/// in the database. When set to true, CustomerDemographic will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool CustomerDemographicReturnsNewIfNotFound
		{
			get	{ return _customerDemographicReturnsNewIfNotFound; }
			set { _customerDemographicReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Northwind.SSDAL
{
	public enum CustomerCustomerDemoFieldIndex
	{
		///<summary>CustomerId. </summary>
		CustomerId,
		///<summary>CustomerTypeId. </summary>
		CustomerTypeId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Northwind.SSDAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: CustomerCustomerDemo. </summary>
	public partial class CustomerCustomerDemoRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between CustomerCustomerDemoEntity and CustomerEntity over the m:1 relation they have, using the relation between the fields: CustomerCustomerDemo.CustomerId - Customer.CustomerId</summary>
		public virtual IEntityRelation CustomerEntityUsingCustomerId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Customer", false, new[] { CustomerFields.CustomerId, CustomerCustomerDemoFields.CustomerId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CustomerCustomerDemoEntity and CustomerDemographicEntity over the m:1 relation they have, using the relation between the fields: CustomerCustomerDemo.CustomerTypeId - CustomerDemographic.CustomerTypeId</summary>
		public virtual IEntityRelation CustomerDemographicEntityUsingCustomerTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CustomerDemographic", false, new[] { CustomerDemographicFields.CustomerTypeId, CustomerCustomerDemoFields.CustomerTypeId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCustomerCustomerDemoRelations
	{
		internal static readonly IEntityRelation CustomerEntityUsingCustomerIdStatic = new CustomerCustomerDemoRelations().CustomerEntityUsingCustomerId;
		internal static readonly IEntityRelation CustomerDemographicEntityUsingCustomerTypeIdStatic = new CustomerCustomerDemoRelations().CustomerDemographicEntityUsingCustomerTypeId;

		/// <summary>CTor</summary>
		static StaticCustomerCustomerDemoRelations() { }
	}
}
