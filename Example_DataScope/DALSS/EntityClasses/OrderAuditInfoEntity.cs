//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Northwind.SSDAL.FactoryClasses;
using Northwind.SSDAL.DaoClasses;
using Northwind.SSDAL.RelationClasses;
using Northwind.SSDAL.HelperClasses;
using Northwind.SSDAL.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Northwind.SSDAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'OrderAuditInfo'. <br/><br/></summary>
	[Serializable]
	public partial class OrderAuditInfoEntity : AuditInfoEntity
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private OrderEntity _order;
		private bool	_orderReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static OrderAuditInfoEntityStaticMetaData _staticMetaData = new OrderAuditInfoEntityStaticMetaData();
		private static OrderAuditInfoRelations _relationsFactory = new OrderAuditInfoRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static new partial class MemberNames
		{
			/// <summary>Member name AuditActionType</summary>
			public static readonly string AuditActionType = "AuditActionType";
			/// <summary>Member name Order</summary>
			public static readonly string Order = "Order";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class OrderAuditInfoEntityStaticMetaData : AuditInfoEntityStaticMetaData
		{
			public OrderAuditInfoEntityStaticMetaData()
			{
				SetEntityCoreInfo("OrderAuditInfoEntity", InheritanceHierarchyType.TargetPerEntity, true, (int)Northwind.SSDAL.EntityType.OrderAuditInfoEntity, typeof(OrderAuditInfoEntity), typeof(OrderAuditInfoEntityFactory), false);
				AddNavigatorMetaData<OrderAuditInfoEntity, OrderEntity>("Order", "OrderAuditInfos", (a, b) => a._order = b, a => a._order, (a, b) => a.Order = b, Northwind.SSDAL.RelationClasses.StaticOrderAuditInfoRelations.OrderEntityUsingOrderIdStatic, ()=>new OrderAuditInfoRelations().OrderEntityUsingOrderId, null, new int[] { (int)OrderAuditInfoFieldIndex.OrderId }, null, true, (int)Northwind.SSDAL.EntityType.OrderEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static OrderAuditInfoEntity()
		{
		}

		/// <summary>CTor</summary>
		public OrderAuditInfoEntity() 
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="auditInfoId">PK value for OrderAuditInfo which data should be fetched into this OrderAuditInfo object</param>
		public OrderAuditInfoEntity(System.Int32 auditInfoId):base(auditInfoId)
		{
			InitClassFetch(auditInfoId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="auditInfoId">PK value for OrderAuditInfo which data should be fetched into this OrderAuditInfo object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public OrderAuditInfoEntity(System.Int32 auditInfoId, IPrefetchPath prefetchPathToUse):base(auditInfoId, prefetchPathToUse)
		{
			InitClassFetch(auditInfoId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="auditInfoId">PK value for OrderAuditInfo which data should be fetched into this OrderAuditInfo object</param>
		/// <param name="validator">The custom validator object for this OrderAuditInfoEntity</param>
		public OrderAuditInfoEntity(System.Int32 auditInfoId, IValidator validator):base(auditInfoId, validator)
		{
			InitClassFetch(auditInfoId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected OrderAuditInfoEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}
		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches.</summary>
		/// <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false). </param>
		/// <returns>ready to use predicateexpression</returns>
		public new static IPredicateExpression GetEntityTypeFilter(bool negate=false)
		{
			return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("OrderAuditInfoEntity", negate);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key specified in a polymorphic way, so the entity returned  could be of a subtype of the current entity or the current entity.</summary>
		/// <param name="transactionToUse">transaction to use during fetch</param>
		/// <param name="auditInfoId">PK value for OrderAuditInfo which data should be fetched into this OrderAuditInfo object</param>
		/// <param name="contextToUse">Context to use for fetch</param>
		/// <returns>Fetched entity of the type of this entity or a subtype, or an empty entity of that type if not found.</returns>
		public static new OrderAuditInfoEntity FetchPolymorphic(ITransaction transactionToUse, System.Int32 auditInfoId, Context contextToUse)
		{
			return FetchPolymorphic(transactionToUse, auditInfoId, contextToUse, null);
		}
				
		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key specified in a polymorphic way, so the entity returned  could be of a subtype of the current entity or the current entity.</summary>
		/// <param name="transactionToUse">transaction to use during fetch</param>
		/// <param name="auditInfoId">PK value for OrderAuditInfo which data should be fetched into this OrderAuditInfo object</param>
		/// <param name="contextToUse">Context to use for fetch</param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>Fetched entity of the type of this entity or a subtype, or an empty entity of that type if not found.</returns>
		public static new OrderAuditInfoEntity FetchPolymorphic(ITransaction transactionToUse, System.Int32 auditInfoId, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			IEntityFields fields = EntityFieldsFactory.CreateEntityFieldsObject(Northwind.SSDAL.EntityType.OrderAuditInfoEntity);
			fields.ForcedValueWrite((int)OrderAuditInfoFieldIndex.AuditInfoId, auditInfoId);
			return (OrderAuditInfoEntity)new OrderAuditInfoDAO().FetchExistingPolymorphic(transactionToUse, fields, contextToUse, excludedIncludedFields);
		}


		/// <summary>Retrieves the related entity of type 'OrderEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'OrderEntity' which is related to this entity.</returns>
		public virtual OrderEntity GetSingleOrder(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<OrderEntity>("Order", forceFetch, _orderReturnsNewIfNotFound, e=>e.FetchUsingPK(this.OrderId));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="auditInfoId">PK value for OrderAuditInfo which data should be fetched into this OrderAuditInfo object</param>
		/// <param name="validator">The validator object for this OrderAuditInfoEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Int32 auditInfoId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			InitClassMembers();	

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{			_orderReturnsNewIfNotFound = false;

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

		}


		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateOrderAuditInfoDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public new static OrderAuditInfoRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'Order'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathOrder { get { return _staticMetaData.GetPrefetchPathElement("Order", new Northwind.SSDAL.CollectionClasses.OrderCollection()); } }


		/// <summary>The OrderId property of the Entity OrderAuditInfo<br/><br/></summary>
		/// <remarks>Mapped on  table field: "OrderAuditInfo"."OrderID"<br/>
		/// Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 OrderId
		{
			get { return (System.Int32)GetValue((int)OrderAuditInfoFieldIndex.OrderId, true); }
			set	{ SetValue((int)OrderAuditInfoFieldIndex.OrderId, value, true); }
		}


		/// <summary>Gets / sets related entity of type 'OrderEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual OrderEntity Order
		{
			get	{ return GetSingleOrder(false); }
			set { SetSingleRelatedEntityNavigator(value, "Order"); }
		}

		/// <summary>Gets / sets the lazy loading flag for Order. When set to true, Order is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time Order is accessed. You can always execute a forced fetch by calling GetSingleOrder(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchOrder
		{
			get	{ return GetAlwaysFetchValueForNavigator("Order"); }
			set	{ SetAlwaysFetchValueForNavigator("Order", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property Order already has been fetched. Setting this property to false when Order has been fetched
		/// will set Order to null as well. Setting this property to true while Order hasn't been fetched disables lazy loading for Order</summary>
		[Browsable(false)]
		public bool AlreadyFetchedOrder
		{
			get { return GetAlreadyFetchedValueForNavigator("Order");}
			set { SetAlreadyFetchedValueForNavigator("Order", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property Order is not found
		/// in the database. When set to true, Order will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool OrderReturnsNewIfNotFound
		{
			get	{ return _orderReturnsNewIfNotFound; }
			set { _orderReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Northwind.SSDAL
{
	public enum OrderAuditInfoFieldIndex
	{
		///<summary>ActionData. Inherited from AuditInfo</summary>
		ActionData,
		///<summary>ActionDateTime. Inherited from AuditInfo</summary>
		ActionDateTime,
		///<summary>AffectedEntityName. Inherited from AuditInfo</summary>
		AffectedEntityName,
		///<summary>AuditActionTypeId. Inherited from AuditInfo</summary>
		AuditActionTypeId,
		///<summary>AuditInfoId. Inherited from AuditInfo</summary>
		AuditInfoId_AuditInfo,
		///<summary>UserId. Inherited from AuditInfo</summary>
		UserId,
		///<summary>AuditInfoId. </summary>
		AuditInfoId,
		///<summary>OrderId. </summary>
		OrderId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Northwind.SSDAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: OrderAuditInfo. </summary>
	public partial class OrderAuditInfoRelations: AuditInfoRelations
	{

		/// <summary>Returns a new IEntityRelation object, between OrderAuditInfoEntity and AuditActionTypeEntity over the m:1 relation they have, using the relation between the fields: OrderAuditInfo.AuditActionTypeId - AuditActionType.AuditActionTypeId</summary>
		public override IEntityRelation AuditActionTypeEntityUsingAuditActionTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "AuditActionType", false, new[] { AuditActionTypeFields.AuditActionTypeId, OrderAuditInfoFields.AuditActionTypeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderAuditInfoEntity and OrderEntity over the m:1 relation they have, using the relation between the fields: OrderAuditInfo.OrderId - Order.OrderId</summary>
		public virtual IEntityRelation OrderEntityUsingOrderId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Order", false, new[] { OrderFields.OrderId, OrderAuditInfoFields.OrderId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderAuditInfoEntity and UserEntity over the m:1 relation they have, using the relation between the fields: OrderAuditInfo.UserId - User.UserId</summary>
		public override IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserId, OrderAuditInfoFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between OrderAuditInfoEntity and AuditInfoEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>
		internal IEntityRelation RelationToSuperTypeAuditInfoEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(false, new[] { AuditInfoFields.AuditInfoId, OrderAuditInfoFields.AuditInfoId }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			return null;
		}
		
		/// <inheritdoc/>
		public override IEntityRelation GetSuperTypeRelation()	{ return this.RelationToSuperTypeAuditInfoEntity; }

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticOrderAuditInfoRelations
	{
		internal static readonly IEntityRelation AuditActionTypeEntityUsingAuditActionTypeIdStatic = new OrderAuditInfoRelations().AuditActionTypeEntityUsingAuditActionTypeId;
		internal static readonly IEntityRelation OrderEntityUsingOrderIdStatic = new OrderAuditInfoRelations().OrderEntityUsingOrderId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new OrderAuditInfoRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticOrderAuditInfoRelations() { }
	}
}
